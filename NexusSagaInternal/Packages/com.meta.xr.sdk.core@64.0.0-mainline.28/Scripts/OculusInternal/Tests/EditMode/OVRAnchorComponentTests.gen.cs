/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https://developer.oculus.com/licenses/oculussdk/
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#if OVR_INTERNAL_CODE
// This file was automatically @generated by ///arvr/projects/integrations/codegen/UOIAssets/UOIAssets.csproj
// Manual edits will be lost.
#endif

#if OVR_INTERNAL_CODE
#if OVRPLUGIN_TESTING

using NUnit.Framework;

static partial class OVRAnchorComponentEditModeTests
{
    class Locatable : Fixture<OVRLocatable>
    {
        [Test]
        public void EqualityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsTrue(componentA == componentA);
#pragma warning restore
            Assert.IsFalse(componentA == componentB);
        }

        [Test]
        public void InequalityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsFalse(componentA != componentA);
#pragma warning restore
            Assert.IsTrue(componentA != componentB);
        }

        [Test]
        public void SpaceComponentTypeIsLocatable()
            => Assert.AreEqual(OVRPlugin.SpaceComponentType.Locatable, GetSpaceComponentType());
    }

    class Storable : Fixture<OVRStorable>
    {
        [Test]
        public void EqualityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsTrue(componentA == componentA);
#pragma warning restore
            Assert.IsFalse(componentA == componentB);
        }

        [Test]
        public void InequalityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsFalse(componentA != componentA);
#pragma warning restore
            Assert.IsTrue(componentA != componentB);
        }

        [Test]
        public void SpaceComponentTypeIsStorable()
            => Assert.AreEqual(OVRPlugin.SpaceComponentType.Storable, GetSpaceComponentType());
    }

    class Sharable : Fixture<OVRSharable>
    {
        [Test]
        public void EqualityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsTrue(componentA == componentA);
#pragma warning restore
            Assert.IsFalse(componentA == componentB);
        }

        [Test]
        public void InequalityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsFalse(componentA != componentA);
#pragma warning restore
            Assert.IsTrue(componentA != componentB);
        }

        [Test]
        public void SpaceComponentTypeIsSharable()
            => Assert.AreEqual(OVRPlugin.SpaceComponentType.Sharable, GetSpaceComponentType());
    }

    class Bounded2D : Fixture<OVRBounded2D>
    {
        [Test]
        public void EqualityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsTrue(componentA == componentA);
#pragma warning restore
            Assert.IsFalse(componentA == componentB);
        }

        [Test]
        public void InequalityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsFalse(componentA != componentA);
#pragma warning restore
            Assert.IsTrue(componentA != componentB);
        }

        [Test]
        public void SpaceComponentTypeIsBounded2D()
            => Assert.AreEqual(OVRPlugin.SpaceComponentType.Bounded2D, GetSpaceComponentType());
    }

    class Bounded3D : Fixture<OVRBounded3D>
    {
        [Test]
        public void EqualityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsTrue(componentA == componentA);
#pragma warning restore
            Assert.IsFalse(componentA == componentB);
        }

        [Test]
        public void InequalityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsFalse(componentA != componentA);
#pragma warning restore
            Assert.IsTrue(componentA != componentB);
        }

        [Test]
        public void SpaceComponentTypeIsBounded3D()
            => Assert.AreEqual(OVRPlugin.SpaceComponentType.Bounded3D, GetSpaceComponentType());
    }

    class SemanticLabels : Fixture<OVRSemanticLabels>
    {
        [Test]
        public void EqualityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsTrue(componentA == componentA);
#pragma warning restore
            Assert.IsFalse(componentA == componentB);
        }

        [Test]
        public void InequalityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsFalse(componentA != componentA);
#pragma warning restore
            Assert.IsTrue(componentA != componentB);
        }

        [Test]
        public void SpaceComponentTypeIsSemanticLabels()
            => Assert.AreEqual(OVRPlugin.SpaceComponentType.SemanticLabels, GetSpaceComponentType());
    }

    class RoomLayout : Fixture<OVRRoomLayout>
    {
        [Test]
        public void EqualityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsTrue(componentA == componentA);
#pragma warning restore
            Assert.IsFalse(componentA == componentB);
        }

        [Test]
        public void InequalityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsFalse(componentA != componentA);
#pragma warning restore
            Assert.IsTrue(componentA != componentB);
        }

        [Test]
        public void SpaceComponentTypeIsRoomLayout()
            => Assert.AreEqual(OVRPlugin.SpaceComponentType.RoomLayout, GetSpaceComponentType());
    }

    class AnchorContainer : Fixture<OVRAnchorContainer>
    {
        [Test]
        public void EqualityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsTrue(componentA == componentA);
#pragma warning restore
            Assert.IsFalse(componentA == componentB);
        }

        [Test]
        public void InequalityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsFalse(componentA != componentA);
#pragma warning restore
            Assert.IsTrue(componentA != componentB);
        }

        [Test]
        public void SpaceComponentTypeIsSpaceContainer()
            => Assert.AreEqual(OVRPlugin.SpaceComponentType.SpaceContainer, GetSpaceComponentType());
    }

    class TriangleMesh : Fixture<OVRTriangleMesh>
    {
        [Test]
        public void EqualityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsTrue(componentA == componentA);
#pragma warning restore
            Assert.IsFalse(componentA == componentB);
        }

        [Test]
        public void InequalityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsFalse(componentA != componentA);
#pragma warning restore
            Assert.IsTrue(componentA != componentB);
        }

        [Test]
        public void SpaceComponentTypeIsTriangleMesh()
            => Assert.AreEqual(OVRPlugin.SpaceComponentType.TriangleMesh, GetSpaceComponentType());
    }

    class RoomLabel : Fixture<OVRRoomLabel>
    {
        [Test]
        public void EqualityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsTrue(componentA == componentA);
#pragma warning restore
            Assert.IsFalse(componentA == componentB);
        }

        [Test]
        public void InequalityOperator()
        {
            var (componentA, componentB) = GetRandomComponents();
#pragma warning disable CS1718 // comparing against same variable
            Assert.IsFalse(componentA != componentA);
#pragma warning restore
            Assert.IsTrue(componentA != componentB);
        }

        [Test]
        public void SpaceComponentTypeIsRoomLabel()
            => Assert.AreEqual(OVRPlugin.SpaceComponentType.RoomLabel, GetSpaceComponentType());
    }
}

#endif // OVRPLUGIN_TESTING
#endif // OVR_INTERNAL_CODE
