/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https://developer.oculus.com/licenses/oculussdk/
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT EDIT, @generated by arvr/projects/integrations/codegen/generate_mockovrplugin.py

#if OVRPLUGIN_TESTING
#pragma warning disable CS0618 // Using obsolete API

using System;
using UnityEngine;
using Marshal = System.Runtime.InteropServices.Marshal;

// The lowest-level interface we have with OVRPlugin is the P/Invoke (extern) methods in OVRPlugin.cs.
// This file replaces them with new methods that allow test methods to be injected by overriding them
// in a subclass. This allows end-to-end testing of the C# layer to be done.

/* How to use:

1. Determine which OVRP classes you need to mock or stub out. In OVRPlugin.cs, use
this #if structure to rename the OVRP:

#if OVR_INTERNAL_CODE
#if OVRPLUGIN_TESTING
    private static class OVRP_1_999_0_PROD
#else
    private static class OVRP_1_999_0
#endif
#else
    private static class OVRP_1_999_0
#endif

2. If any private types or private methods in OVRPlugin.cs need to be referenced to build correctly,
expose them with the same #if structure as in step #1 above.

3. If the OVRP class has any non-extern helper methods, it should be modified to make all
sub-calls using "OVRP_1_999_0." syntax, rather than calling it directly.

4. Re-run the script listed at the top to regenerate this file.

See TrackedKeyboardTest.cs for a test sample using MockOVRPlugin.
*/

public partial class OVRPlugin
{
    public class OVRP_1_0_0_TEST
    {

        public virtual TrackingOrigin ovrp_GetTrackingOriginType() =>
            OVRP_1_0_0_PROD.ovrp_GetTrackingOriginType();

        public virtual Bool ovrp_SetTrackingOriginType(TrackingOrigin originType) =>
            OVRP_1_0_0_PROD.ovrp_SetTrackingOriginType(originType);

        public virtual Posef ovrp_GetTrackingCalibratedOrigin() =>
            OVRP_1_0_0_PROD.ovrp_GetTrackingCalibratedOrigin();

        public virtual Bool ovrp_RecenterTrackingOrigin(uint flags) =>
            OVRP_1_0_0_PROD.ovrp_RecenterTrackingOrigin(flags);
    }

    public static class OVRP_1_0_0
    {
        public static OVRP_1_0_0_TEST mockObj = new OVRP_1_0_0_TEST();

        public static readonly System.Version version = OVRP_1_0_0_PROD.version;

        public static TrackingOrigin ovrp_GetTrackingOriginType() =>
            mockObj.ovrp_GetTrackingOriginType();

        public static Bool ovrp_SetTrackingOriginType(TrackingOrigin originType) =>
            mockObj.ovrp_SetTrackingOriginType(originType);

        public static Posef ovrp_GetTrackingCalibratedOrigin() =>
            mockObj.ovrp_GetTrackingCalibratedOrigin();

        public static Bool ovrp_RecenterTrackingOrigin(uint flags) =>
            mockObj.ovrp_RecenterTrackingOrigin(flags);
    }

    public class OVRP_1_1_0_TEST
    {

        public virtual Bool ovrp_GetInitialized() =>
            OVRP_1_1_0_PROD.ovrp_GetInitialized();

        public virtual IntPtr _ovrp_GetVersion() =>
            OVRP_1_1_0_PROD._ovrp_GetVersion();

        public virtual IntPtr _ovrp_GetNativeSDKVersion() =>
            OVRP_1_1_0_PROD._ovrp_GetNativeSDKVersion();

        public virtual IntPtr ovrp_GetAudioOutId() =>
            OVRP_1_1_0_PROD.ovrp_GetAudioOutId();

        public virtual IntPtr ovrp_GetAudioInId() =>
            OVRP_1_1_0_PROD.ovrp_GetAudioInId();

        public virtual float ovrp_GetEyeTextureScale() =>
            OVRP_1_1_0_PROD.ovrp_GetEyeTextureScale();

        public virtual Bool ovrp_SetEyeTextureScale(float value) =>
            OVRP_1_1_0_PROD.ovrp_SetEyeTextureScale(value);

        public virtual Bool ovrp_GetTrackingOrientationSupported() =>
            OVRP_1_1_0_PROD.ovrp_GetTrackingOrientationSupported();

        public virtual Bool ovrp_GetTrackingOrientationEnabled() =>
            OVRP_1_1_0_PROD.ovrp_GetTrackingOrientationEnabled();

        public virtual Bool ovrp_SetTrackingOrientationEnabled(Bool value) =>
            OVRP_1_1_0_PROD.ovrp_SetTrackingOrientationEnabled(value);

        public virtual Bool ovrp_GetTrackingPositionSupported() =>
            OVRP_1_1_0_PROD.ovrp_GetTrackingPositionSupported();

        public virtual Bool ovrp_GetTrackingPositionEnabled() =>
            OVRP_1_1_0_PROD.ovrp_GetTrackingPositionEnabled();

        public virtual Bool ovrp_SetTrackingPositionEnabled(Bool value) =>
            OVRP_1_1_0_PROD.ovrp_SetTrackingPositionEnabled(value);

        public virtual Bool ovrp_GetNodePresent(Node nodeId) =>
            OVRP_1_1_0_PROD.ovrp_GetNodePresent(nodeId);

        public virtual Bool ovrp_GetNodeOrientationTracked(Node nodeId) =>
            OVRP_1_1_0_PROD.ovrp_GetNodeOrientationTracked(nodeId);

        public virtual Bool ovrp_GetNodePositionTracked(Node nodeId) =>
            OVRP_1_1_0_PROD.ovrp_GetNodePositionTracked(nodeId);

        public virtual Frustumf ovrp_GetNodeFrustum(Node nodeId) =>
            OVRP_1_1_0_PROD.ovrp_GetNodeFrustum(nodeId);

        public virtual ControllerState ovrp_GetControllerState(uint controllerMask) =>
            OVRP_1_1_0_PROD.ovrp_GetControllerState(controllerMask);

        public virtual int ovrp_GetSystemCpuLevel() =>
            OVRP_1_1_0_PROD.ovrp_GetSystemCpuLevel();

        public virtual Bool ovrp_SetSystemCpuLevel(int value) =>
            OVRP_1_1_0_PROD.ovrp_SetSystemCpuLevel(value);

        public virtual int ovrp_GetSystemGpuLevel() =>
            OVRP_1_1_0_PROD.ovrp_GetSystemGpuLevel();

        public virtual Bool ovrp_SetSystemGpuLevel(int value) =>
            OVRP_1_1_0_PROD.ovrp_SetSystemGpuLevel(value);

        public virtual Bool ovrp_GetSystemPowerSavingMode() =>
            OVRP_1_1_0_PROD.ovrp_GetSystemPowerSavingMode();

        public virtual float ovrp_GetSystemDisplayFrequency() =>
            OVRP_1_1_0_PROD.ovrp_GetSystemDisplayFrequency();

        public virtual int ovrp_GetSystemVSyncCount() =>
            OVRP_1_1_0_PROD.ovrp_GetSystemVSyncCount();

        public virtual float ovrp_GetSystemVolume() =>
            OVRP_1_1_0_PROD.ovrp_GetSystemVolume();

        public virtual BatteryStatus ovrp_GetSystemBatteryStatus() =>
            OVRP_1_1_0_PROD.ovrp_GetSystemBatteryStatus();

        public virtual float ovrp_GetSystemBatteryLevel() =>
            OVRP_1_1_0_PROD.ovrp_GetSystemBatteryLevel();

        public virtual float ovrp_GetSystemBatteryTemperature() =>
            OVRP_1_1_0_PROD.ovrp_GetSystemBatteryTemperature();

        public virtual IntPtr _ovrp_GetSystemProductName() =>
            OVRP_1_1_0_PROD._ovrp_GetSystemProductName();

        public virtual Bool ovrp_ShowSystemUI(PlatformUI ui) =>
            OVRP_1_1_0_PROD.ovrp_ShowSystemUI(ui);

        public virtual Bool ovrp_GetAppMonoscopic() =>
            OVRP_1_1_0_PROD.ovrp_GetAppMonoscopic();

        public virtual Bool ovrp_SetAppMonoscopic(Bool value) =>
            OVRP_1_1_0_PROD.ovrp_SetAppMonoscopic(value);

        public virtual Bool ovrp_GetAppHasVrFocus() =>
            OVRP_1_1_0_PROD.ovrp_GetAppHasVrFocus();

        public virtual Bool ovrp_GetAppShouldQuit() =>
            OVRP_1_1_0_PROD.ovrp_GetAppShouldQuit();

        public virtual Bool ovrp_GetAppShouldRecenter() =>
            OVRP_1_1_0_PROD.ovrp_GetAppShouldRecenter();

        public virtual IntPtr _ovrp_GetAppLatencyTimings() =>
            OVRP_1_1_0_PROD._ovrp_GetAppLatencyTimings();

        public virtual Bool ovrp_GetUserPresent() =>
            OVRP_1_1_0_PROD.ovrp_GetUserPresent();

        public virtual float ovrp_GetUserIPD() =>
            OVRP_1_1_0_PROD.ovrp_GetUserIPD();

        public virtual Bool ovrp_SetUserIPD(float value) =>
            OVRP_1_1_0_PROD.ovrp_SetUserIPD(value);

        public virtual float ovrp_GetUserEyeDepth() =>
            OVRP_1_1_0_PROD.ovrp_GetUserEyeDepth();

        public virtual Bool ovrp_SetUserEyeDepth(float value) =>
            OVRP_1_1_0_PROD.ovrp_SetUserEyeDepth(value);

        public virtual float ovrp_GetUserEyeHeight() =>
            OVRP_1_1_0_PROD.ovrp_GetUserEyeHeight();

        public virtual Bool ovrp_SetUserEyeHeight(float value) =>
            OVRP_1_1_0_PROD.ovrp_SetUserEyeHeight(value);
    }

    public static class OVRP_1_1_0
    {
        public static OVRP_1_1_0_TEST mockObj = new OVRP_1_1_0_TEST();

        public static readonly System.Version version = OVRP_1_1_0_PROD.version;

        public static Bool ovrp_GetInitialized() =>
            mockObj.ovrp_GetInitialized();

        public static IntPtr _ovrp_GetVersion() =>
            mockObj._ovrp_GetVersion();
        public static string ovrp_GetVersion() =>
            OVRP_1_1_0_PROD.ovrp_GetVersion();

        public static IntPtr _ovrp_GetNativeSDKVersion() =>
            mockObj._ovrp_GetNativeSDKVersion();
        public static string ovrp_GetNativeSDKVersion() =>
            OVRP_1_1_0_PROD.ovrp_GetNativeSDKVersion();

        public static IntPtr ovrp_GetAudioOutId() =>
            mockObj.ovrp_GetAudioOutId();

        public static IntPtr ovrp_GetAudioInId() =>
            mockObj.ovrp_GetAudioInId();

        public static float ovrp_GetEyeTextureScale() =>
            mockObj.ovrp_GetEyeTextureScale();

        public static Bool ovrp_SetEyeTextureScale(float value) =>
            mockObj.ovrp_SetEyeTextureScale(value);

        public static Bool ovrp_GetTrackingOrientationSupported() =>
            mockObj.ovrp_GetTrackingOrientationSupported();

        public static Bool ovrp_GetTrackingOrientationEnabled() =>
            mockObj.ovrp_GetTrackingOrientationEnabled();

        public static Bool ovrp_SetTrackingOrientationEnabled(Bool value) =>
            mockObj.ovrp_SetTrackingOrientationEnabled(value);

        public static Bool ovrp_GetTrackingPositionSupported() =>
            mockObj.ovrp_GetTrackingPositionSupported();

        public static Bool ovrp_GetTrackingPositionEnabled() =>
            mockObj.ovrp_GetTrackingPositionEnabled();

        public static Bool ovrp_SetTrackingPositionEnabled(Bool value) =>
            mockObj.ovrp_SetTrackingPositionEnabled(value);

        public static Bool ovrp_GetNodePresent(Node nodeId) =>
            mockObj.ovrp_GetNodePresent(nodeId);

        public static Bool ovrp_GetNodeOrientationTracked(Node nodeId) =>
            mockObj.ovrp_GetNodeOrientationTracked(nodeId);

        public static Bool ovrp_GetNodePositionTracked(Node nodeId) =>
            mockObj.ovrp_GetNodePositionTracked(nodeId);

        public static Frustumf ovrp_GetNodeFrustum(Node nodeId) =>
            mockObj.ovrp_GetNodeFrustum(nodeId);

        public static ControllerState ovrp_GetControllerState(uint controllerMask) =>
            mockObj.ovrp_GetControllerState(controllerMask);

        public static int ovrp_GetSystemCpuLevel() =>
            mockObj.ovrp_GetSystemCpuLevel();

        public static Bool ovrp_SetSystemCpuLevel(int value) =>
            mockObj.ovrp_SetSystemCpuLevel(value);

        public static int ovrp_GetSystemGpuLevel() =>
            mockObj.ovrp_GetSystemGpuLevel();

        public static Bool ovrp_SetSystemGpuLevel(int value) =>
            mockObj.ovrp_SetSystemGpuLevel(value);

        public static Bool ovrp_GetSystemPowerSavingMode() =>
            mockObj.ovrp_GetSystemPowerSavingMode();

        public static float ovrp_GetSystemDisplayFrequency() =>
            mockObj.ovrp_GetSystemDisplayFrequency();

        public static int ovrp_GetSystemVSyncCount() =>
            mockObj.ovrp_GetSystemVSyncCount();

        public static float ovrp_GetSystemVolume() =>
            mockObj.ovrp_GetSystemVolume();

        public static BatteryStatus ovrp_GetSystemBatteryStatus() =>
            mockObj.ovrp_GetSystemBatteryStatus();

        public static float ovrp_GetSystemBatteryLevel() =>
            mockObj.ovrp_GetSystemBatteryLevel();

        public static float ovrp_GetSystemBatteryTemperature() =>
            mockObj.ovrp_GetSystemBatteryTemperature();

        public static IntPtr _ovrp_GetSystemProductName() =>
            mockObj._ovrp_GetSystemProductName();
        public static string ovrp_GetSystemProductName() =>
            OVRP_1_1_0_PROD.ovrp_GetSystemProductName();

        public static Bool ovrp_ShowSystemUI(PlatformUI ui) =>
            mockObj.ovrp_ShowSystemUI(ui);

        public static Bool ovrp_GetAppMonoscopic() =>
            mockObj.ovrp_GetAppMonoscopic();

        public static Bool ovrp_SetAppMonoscopic(Bool value) =>
            mockObj.ovrp_SetAppMonoscopic(value);

        public static Bool ovrp_GetAppHasVrFocus() =>
            mockObj.ovrp_GetAppHasVrFocus();

        public static Bool ovrp_GetAppShouldQuit() =>
            mockObj.ovrp_GetAppShouldQuit();

        public static Bool ovrp_GetAppShouldRecenter() =>
            mockObj.ovrp_GetAppShouldRecenter();

        public static IntPtr _ovrp_GetAppLatencyTimings() =>
            mockObj._ovrp_GetAppLatencyTimings();
        public static string ovrp_GetAppLatencyTimings() =>
            OVRP_1_1_0_PROD.ovrp_GetAppLatencyTimings();

        public static Bool ovrp_GetUserPresent() =>
            mockObj.ovrp_GetUserPresent();

        public static float ovrp_GetUserIPD() =>
            mockObj.ovrp_GetUserIPD();

        public static Bool ovrp_SetUserIPD(float value) =>
            mockObj.ovrp_SetUserIPD(value);

        public static float ovrp_GetUserEyeDepth() =>
            mockObj.ovrp_GetUserEyeDepth();

        public static Bool ovrp_SetUserEyeDepth(float value) =>
            mockObj.ovrp_SetUserEyeDepth(value);

        public static float ovrp_GetUserEyeHeight() =>
            mockObj.ovrp_GetUserEyeHeight();

        public static Bool ovrp_SetUserEyeHeight(float value) =>
            mockObj.ovrp_SetUserEyeHeight(value);
    }

    public class OVRP_1_3_0_TEST
    {

        public virtual Bool ovrp_GetEyeOcclusionMeshEnabled() =>
            OVRP_1_3_0_PROD.ovrp_GetEyeOcclusionMeshEnabled();

        public virtual Bool ovrp_SetEyeOcclusionMeshEnabled(Bool value) =>
            OVRP_1_3_0_PROD.ovrp_SetEyeOcclusionMeshEnabled(value);

        public virtual Bool ovrp_GetSystemHeadphonesPresent() =>
            OVRP_1_3_0_PROD.ovrp_GetSystemHeadphonesPresent();
    }

    public static class OVRP_1_3_0
    {
        public static OVRP_1_3_0_TEST mockObj = new OVRP_1_3_0_TEST();

        public static readonly System.Version version = OVRP_1_3_0_PROD.version;

        public static Bool ovrp_GetEyeOcclusionMeshEnabled() =>
            mockObj.ovrp_GetEyeOcclusionMeshEnabled();

        public static Bool ovrp_SetEyeOcclusionMeshEnabled(Bool value) =>
            mockObj.ovrp_SetEyeOcclusionMeshEnabled(value);

        public static Bool ovrp_GetSystemHeadphonesPresent() =>
            mockObj.ovrp_GetSystemHeadphonesPresent();
    }

    public class OVRP_1_9_0_TEST
    {

        public virtual SystemHeadset ovrp_GetSystemHeadsetType() =>
            OVRP_1_9_0_PROD.ovrp_GetSystemHeadsetType();

        public virtual Controller ovrp_GetActiveController() =>
            OVRP_1_9_0_PROD.ovrp_GetActiveController();

        public virtual Controller ovrp_GetConnectedControllers() =>
            OVRP_1_9_0_PROD.ovrp_GetConnectedControllers();

        public virtual Bool ovrp_GetBoundaryGeometry2(BoundaryType boundaryType, IntPtr points,
            ref int pointsCount) =>
            OVRP_1_9_0_PROD.ovrp_GetBoundaryGeometry2(boundaryType, points, ref pointsCount);

        public virtual AppPerfStats ovrp_GetAppPerfStats() =>
            OVRP_1_9_0_PROD.ovrp_GetAppPerfStats();

        public virtual Bool ovrp_ResetAppPerfStats() =>
            OVRP_1_9_0_PROD.ovrp_ResetAppPerfStats();
    }

    public static class OVRP_1_9_0
    {
        public static OVRP_1_9_0_TEST mockObj = new OVRP_1_9_0_TEST();

        public static readonly System.Version version = OVRP_1_9_0_PROD.version;

        public static SystemHeadset ovrp_GetSystemHeadsetType() =>
            mockObj.ovrp_GetSystemHeadsetType();

        public static Controller ovrp_GetActiveController() =>
            mockObj.ovrp_GetActiveController();

        public static Controller ovrp_GetConnectedControllers() =>
            mockObj.ovrp_GetConnectedControllers();

        public static Bool ovrp_GetBoundaryGeometry2(BoundaryType boundaryType, IntPtr points,
            ref int pointsCount) =>
            mockObj.ovrp_GetBoundaryGeometry2(boundaryType, points, ref pointsCount);

        public static AppPerfStats ovrp_GetAppPerfStats() =>
            mockObj.ovrp_GetAppPerfStats();

        public static Bool ovrp_ResetAppPerfStats() =>
            mockObj.ovrp_ResetAppPerfStats();
    }

    public class OVRP_1_12_0_TEST
    {

        public virtual float ovrp_GetAppFramerate() =>
            OVRP_1_12_0_PROD.ovrp_GetAppFramerate();

        public virtual PoseStatef ovrp_GetNodePoseState(Step stepId, Node nodeId) =>
            OVRP_1_12_0_PROD.ovrp_GetNodePoseState(stepId, nodeId);

        public virtual ControllerState2 ovrp_GetControllerState2(uint controllerMask) =>
            OVRP_1_12_0_PROD.ovrp_GetControllerState2(controllerMask);
    }

    public static class OVRP_1_12_0
    {
        public static OVRP_1_12_0_TEST mockObj = new OVRP_1_12_0_TEST();

        public static readonly System.Version version = OVRP_1_12_0_PROD.version;

        public static float ovrp_GetAppFramerate() =>
            mockObj.ovrp_GetAppFramerate();

        public static PoseStatef ovrp_GetNodePoseState(Step stepId, Node nodeId) =>
            mockObj.ovrp_GetNodePoseState(stepId, nodeId);

        public static ControllerState2 ovrp_GetControllerState2(uint controllerMask) =>
            mockObj.ovrp_GetControllerState2(controllerMask);
    }

    public class OVRP_1_38_0_TEST
    {

        public virtual Result ovrp_GetTrackingTransformRelativePose(ref Posef trackingTransformRelativePose,
            TrackingOrigin trackingOrigin) =>
            OVRP_1_38_0_PROD.ovrp_GetTrackingTransformRelativePose(ref trackingTransformRelativePose, trackingOrigin);

        public virtual Result ovrp_Media_Initialize() =>
            OVRP_1_38_0_PROD.ovrp_Media_Initialize();

        public virtual Result ovrp_Media_Shutdown() =>
            OVRP_1_38_0_PROD.ovrp_Media_Shutdown();

        public virtual Result ovrp_Media_GetInitialized(out Bool initialized) =>
            OVRP_1_38_0_PROD.ovrp_Media_GetInitialized(out initialized);

        public virtual Result ovrp_Media_Update() =>
            OVRP_1_38_0_PROD.ovrp_Media_Update();

        public virtual Result ovrp_Media_GetMrcActivationMode(out Media.MrcActivationMode activationMode) =>
            OVRP_1_38_0_PROD.ovrp_Media_GetMrcActivationMode(out activationMode);

        public virtual Result ovrp_Media_SetMrcActivationMode(Media.MrcActivationMode activationMode) =>
            OVRP_1_38_0_PROD.ovrp_Media_SetMrcActivationMode(activationMode);

        public virtual Result ovrp_Media_IsMrcEnabled(out Bool mrcEnabled) =>
            OVRP_1_38_0_PROD.ovrp_Media_IsMrcEnabled(out mrcEnabled);

        public virtual Result ovrp_Media_IsMrcActivated(out Bool mrcActivated) =>
            OVRP_1_38_0_PROD.ovrp_Media_IsMrcActivated(out mrcActivated);

        public virtual Result ovrp_Media_UseMrcDebugCamera(out Bool useMrcDebugCamera) =>
            OVRP_1_38_0_PROD.ovrp_Media_UseMrcDebugCamera(out useMrcDebugCamera);

        public virtual Result ovrp_Media_SetMrcInputVideoBufferType(
            Media.InputVideoBufferType inputVideoBufferType) =>
            OVRP_1_38_0_PROD.ovrp_Media_SetMrcInputVideoBufferType(inputVideoBufferType);

        public virtual Result ovrp_Media_GetMrcInputVideoBufferType(
            ref Media.InputVideoBufferType inputVideoBufferType) =>
            OVRP_1_38_0_PROD.ovrp_Media_GetMrcInputVideoBufferType(ref inputVideoBufferType);

        public virtual Result ovrp_Media_SetMrcFrameSize(int frameWidth, int frameHeight) =>
            OVRP_1_38_0_PROD.ovrp_Media_SetMrcFrameSize(frameWidth, frameHeight);

        public virtual Result ovrp_Media_GetMrcFrameSize(ref int frameWidth, ref int frameHeight) =>
            OVRP_1_38_0_PROD.ovrp_Media_GetMrcFrameSize(ref frameWidth, ref frameHeight);

        public virtual Result ovrp_Media_SetMrcAudioSampleRate(int sampleRate) =>
            OVRP_1_38_0_PROD.ovrp_Media_SetMrcAudioSampleRate(sampleRate);

        public virtual Result ovrp_Media_GetMrcAudioSampleRate(ref int sampleRate) =>
            OVRP_1_38_0_PROD.ovrp_Media_GetMrcAudioSampleRate(ref sampleRate);

        public virtual Result ovrp_Media_SetMrcFrameImageFlipped(Bool flipped) =>
            OVRP_1_38_0_PROD.ovrp_Media_SetMrcFrameImageFlipped(flipped);

        public virtual Result ovrp_Media_GetMrcFrameImageFlipped(ref Bool flipped) =>
            OVRP_1_38_0_PROD.ovrp_Media_GetMrcFrameImageFlipped(ref flipped);

        public virtual Result ovrp_Media_EncodeMrcFrame(System.IntPtr rawBuffer, System.IntPtr audioDataPtr,
            int audioDataLen, int audioChannels, double timestamp, ref int outSyncId) =>
            OVRP_1_38_0_PROD.ovrp_Media_EncodeMrcFrame(rawBuffer, audioDataPtr, audioDataLen, audioChannels, timestamp, ref outSyncId);

        public virtual Result ovrp_Media_EncodeMrcFrameWithDualTextures(System.IntPtr backgroundTextureHandle,
            System.IntPtr foregroundTextureHandle, System.IntPtr audioData, int audioDataLen, int audioChannels,
            double timestamp, ref int outSyncId) =>
            OVRP_1_38_0_PROD.ovrp_Media_EncodeMrcFrameWithDualTextures(backgroundTextureHandle, foregroundTextureHandle, audioData, audioDataLen, audioChannels, timestamp, ref outSyncId);

        public virtual Result ovrp_Media_SyncMrcFrame(int syncId) =>
            OVRP_1_38_0_PROD.ovrp_Media_SyncMrcFrame(syncId);

        public virtual Result ovrp_SetDeveloperMode(Bool active) =>
            OVRP_1_38_0_PROD.ovrp_SetDeveloperMode(active);

        public virtual Result ovrp_GetNodeOrientationValid(Node nodeId, ref Bool nodeOrientationValid) =>
            OVRP_1_38_0_PROD.ovrp_GetNodeOrientationValid(nodeId, ref nodeOrientationValid);

        public virtual Result ovrp_GetNodePositionValid(Node nodeId, ref Bool nodePositionValid) =>
            OVRP_1_38_0_PROD.ovrp_GetNodePositionValid(nodeId, ref nodePositionValid);
    }

    public static class OVRP_1_38_0
    {
        public static OVRP_1_38_0_TEST mockObj = new OVRP_1_38_0_TEST();

        public static readonly System.Version version = OVRP_1_38_0_PROD.version;

        public static Result ovrp_GetTrackingTransformRelativePose(ref Posef trackingTransformRelativePose,
            TrackingOrigin trackingOrigin) =>
            mockObj.ovrp_GetTrackingTransformRelativePose(ref trackingTransformRelativePose, trackingOrigin);

        public static Result ovrp_Media_Initialize() =>
            mockObj.ovrp_Media_Initialize();

        public static Result ovrp_Media_Shutdown() =>
            mockObj.ovrp_Media_Shutdown();

        public static Result ovrp_Media_GetInitialized(out Bool initialized) =>
            mockObj.ovrp_Media_GetInitialized(out initialized);

        public static Result ovrp_Media_Update() =>
            mockObj.ovrp_Media_Update();

        public static Result ovrp_Media_GetMrcActivationMode(out Media.MrcActivationMode activationMode) =>
            mockObj.ovrp_Media_GetMrcActivationMode(out activationMode);

        public static Result ovrp_Media_SetMrcActivationMode(Media.MrcActivationMode activationMode) =>
            mockObj.ovrp_Media_SetMrcActivationMode(activationMode);

        public static Result ovrp_Media_IsMrcEnabled(out Bool mrcEnabled) =>
            mockObj.ovrp_Media_IsMrcEnabled(out mrcEnabled);

        public static Result ovrp_Media_IsMrcActivated(out Bool mrcActivated) =>
            mockObj.ovrp_Media_IsMrcActivated(out mrcActivated);

        public static Result ovrp_Media_UseMrcDebugCamera(out Bool useMrcDebugCamera) =>
            mockObj.ovrp_Media_UseMrcDebugCamera(out useMrcDebugCamera);

        public static Result ovrp_Media_SetMrcInputVideoBufferType(
            Media.InputVideoBufferType inputVideoBufferType) =>
            mockObj.ovrp_Media_SetMrcInputVideoBufferType(inputVideoBufferType);

        public static Result ovrp_Media_GetMrcInputVideoBufferType(
            ref Media.InputVideoBufferType inputVideoBufferType) =>
            mockObj.ovrp_Media_GetMrcInputVideoBufferType(ref inputVideoBufferType);

        public static Result ovrp_Media_SetMrcFrameSize(int frameWidth, int frameHeight) =>
            mockObj.ovrp_Media_SetMrcFrameSize(frameWidth, frameHeight);

        public static Result ovrp_Media_GetMrcFrameSize(ref int frameWidth, ref int frameHeight) =>
            mockObj.ovrp_Media_GetMrcFrameSize(ref frameWidth, ref frameHeight);

        public static Result ovrp_Media_SetMrcAudioSampleRate(int sampleRate) =>
            mockObj.ovrp_Media_SetMrcAudioSampleRate(sampleRate);

        public static Result ovrp_Media_GetMrcAudioSampleRate(ref int sampleRate) =>
            mockObj.ovrp_Media_GetMrcAudioSampleRate(ref sampleRate);

        public static Result ovrp_Media_SetMrcFrameImageFlipped(Bool flipped) =>
            mockObj.ovrp_Media_SetMrcFrameImageFlipped(flipped);

        public static Result ovrp_Media_GetMrcFrameImageFlipped(ref Bool flipped) =>
            mockObj.ovrp_Media_GetMrcFrameImageFlipped(ref flipped);

        public static Result ovrp_Media_EncodeMrcFrame(System.IntPtr rawBuffer, System.IntPtr audioDataPtr,
            int audioDataLen, int audioChannels, double timestamp, ref int outSyncId) =>
            mockObj.ovrp_Media_EncodeMrcFrame(rawBuffer, audioDataPtr, audioDataLen, audioChannels, timestamp, ref outSyncId);

        public static Result ovrp_Media_EncodeMrcFrameWithDualTextures(System.IntPtr backgroundTextureHandle,
            System.IntPtr foregroundTextureHandle, System.IntPtr audioData, int audioDataLen, int audioChannels,
            double timestamp, ref int outSyncId) =>
            mockObj.ovrp_Media_EncodeMrcFrameWithDualTextures(backgroundTextureHandle, foregroundTextureHandle, audioData, audioDataLen, audioChannels, timestamp, ref outSyncId);

        public static Result ovrp_Media_SyncMrcFrame(int syncId) =>
            mockObj.ovrp_Media_SyncMrcFrame(syncId);

        public static Result ovrp_SetDeveloperMode(Bool active) =>
            mockObj.ovrp_SetDeveloperMode(active);

        public static Result ovrp_GetNodeOrientationValid(Node nodeId, ref Bool nodeOrientationValid) =>
            mockObj.ovrp_GetNodeOrientationValid(nodeId, ref nodeOrientationValid);

        public static Result ovrp_GetNodePositionValid(Node nodeId, ref Bool nodePositionValid) =>
            mockObj.ovrp_GetNodePositionValid(nodeId, ref nodePositionValid);
    }

    public class OVRP_1_44_0_TEST
    {

        public virtual Result ovrp_GetHandTrackingEnabled(ref Bool handTrackingEnabled) =>
            OVRP_1_44_0_PROD.ovrp_GetHandTrackingEnabled(ref handTrackingEnabled);

        public virtual Result ovrp_GetHandState(Step stepId, Hand hand, out HandStateInternal handState) =>
            OVRP_1_44_0_PROD.ovrp_GetHandState(stepId, hand, out handState);

        public virtual Result ovrp_GetSkeleton(SkeletonType skeletonType, out Skeleton skeleton) =>
            OVRP_1_44_0_PROD.ovrp_GetSkeleton(skeletonType, out skeleton);

        public virtual Result ovrp_GetMesh(MeshType meshType, System.IntPtr meshPtr) =>
            OVRP_1_44_0_PROD.ovrp_GetMesh(meshType, meshPtr);

        public virtual Result ovrp_OverrideExternalCameraFov(int cameraId, Bool useOverriddenFov, ref Fovf fov) =>
            OVRP_1_44_0_PROD.ovrp_OverrideExternalCameraFov(cameraId, useOverriddenFov, ref fov);

        public virtual Result ovrp_GetUseOverriddenExternalCameraFov(int cameraId, out Bool useOverriddenFov) =>
            OVRP_1_44_0_PROD.ovrp_GetUseOverriddenExternalCameraFov(cameraId, out useOverriddenFov);

        public virtual Result ovrp_OverrideExternalCameraStaticPose(int cameraId, Bool useOverriddenPose,
            ref Posef poseInStageOrigin) =>
            OVRP_1_44_0_PROD.ovrp_OverrideExternalCameraStaticPose(cameraId, useOverriddenPose, ref poseInStageOrigin);

        public virtual Result ovrp_GetUseOverriddenExternalCameraStaticPose(int cameraId,
            out Bool useOverriddenStaticPose) =>
            OVRP_1_44_0_PROD.ovrp_GetUseOverriddenExternalCameraStaticPose(cameraId, out useOverriddenStaticPose);

        public virtual Result ovrp_ResetDefaultExternalCamera() =>
            OVRP_1_44_0_PROD.ovrp_ResetDefaultExternalCamera();

        public virtual Result ovrp_SetDefaultExternalCamera(string cameraName,
            ref CameraIntrinsics cameraIntrinsics, ref CameraExtrinsics cameraExtrinsics) =>
            OVRP_1_44_0_PROD.ovrp_SetDefaultExternalCamera(cameraName, ref cameraIntrinsics, ref cameraExtrinsics);

        public virtual Result ovrp_GetLocalTrackingSpaceRecenterCount(ref int recenterCount) =>
            OVRP_1_44_0_PROD.ovrp_GetLocalTrackingSpaceRecenterCount(ref recenterCount);
    }

    public static class OVRP_1_44_0
    {
        public static OVRP_1_44_0_TEST mockObj = new OVRP_1_44_0_TEST();

        public static readonly System.Version version = OVRP_1_44_0_PROD.version;

        public static Result ovrp_GetHandTrackingEnabled(ref Bool handTrackingEnabled) =>
            mockObj.ovrp_GetHandTrackingEnabled(ref handTrackingEnabled);

        public static Result ovrp_GetHandState(Step stepId, Hand hand, out HandStateInternal handState) =>
            mockObj.ovrp_GetHandState(stepId, hand, out handState);

        public static Result ovrp_GetSkeleton(SkeletonType skeletonType, out Skeleton skeleton) =>
            mockObj.ovrp_GetSkeleton(skeletonType, out skeleton);

        public static Result ovrp_GetMesh(MeshType meshType, System.IntPtr meshPtr) =>
            mockObj.ovrp_GetMesh(meshType, meshPtr);

        public static Result ovrp_OverrideExternalCameraFov(int cameraId, Bool useOverriddenFov, ref Fovf fov) =>
            mockObj.ovrp_OverrideExternalCameraFov(cameraId, useOverriddenFov, ref fov);

        public static Result ovrp_GetUseOverriddenExternalCameraFov(int cameraId, out Bool useOverriddenFov) =>
            mockObj.ovrp_GetUseOverriddenExternalCameraFov(cameraId, out useOverriddenFov);

        public static Result ovrp_OverrideExternalCameraStaticPose(int cameraId, Bool useOverriddenPose,
            ref Posef poseInStageOrigin) =>
            mockObj.ovrp_OverrideExternalCameraStaticPose(cameraId, useOverriddenPose, ref poseInStageOrigin);

        public static Result ovrp_GetUseOverriddenExternalCameraStaticPose(int cameraId,
            out Bool useOverriddenStaticPose) =>
            mockObj.ovrp_GetUseOverriddenExternalCameraStaticPose(cameraId, out useOverriddenStaticPose);

        public static Result ovrp_ResetDefaultExternalCamera() =>
            mockObj.ovrp_ResetDefaultExternalCamera();

        public static Result ovrp_SetDefaultExternalCamera(string cameraName,
            ref CameraIntrinsics cameraIntrinsics, ref CameraExtrinsics cameraExtrinsics) =>
            mockObj.ovrp_SetDefaultExternalCamera(cameraName, ref cameraIntrinsics, ref cameraExtrinsics);

        public static Result ovrp_GetLocalTrackingSpaceRecenterCount(ref int recenterCount) =>
            mockObj.ovrp_GetLocalTrackingSpaceRecenterCount(ref recenterCount);
    }

    public class OVRP_1_55_0_TEST
    {

        public virtual Result ovrp_GetSkeleton2(SkeletonType skeletonType, out Skeleton2Internal skeleton) =>
            OVRP_1_55_0_PROD.ovrp_GetSkeleton2(skeletonType, out skeleton);

        public virtual Result ovrp_PollEvent(ref EventDataBuffer eventDataBuffer) =>
            OVRP_1_55_0_PROD.ovrp_PollEvent(ref eventDataBuffer);

        public virtual Result ovrp_GetNativeXrApiType(out XrApi xrApi) =>
            OVRP_1_55_0_PROD.ovrp_GetNativeXrApiType(out xrApi);

        public virtual Result ovrp_GetNativeOpenXRHandles(out UInt64 xrInstance, out UInt64 xrSession) =>
            OVRP_1_55_0_PROD.ovrp_GetNativeOpenXRHandles(out xrInstance, out xrSession);
    }

    public static class OVRP_1_55_0
    {
        public static OVRP_1_55_0_TEST mockObj = new OVRP_1_55_0_TEST();

        public static readonly System.Version version = OVRP_1_55_0_PROD.version;

        public static Result ovrp_GetSkeleton2(SkeletonType skeletonType, out Skeleton2Internal skeleton) =>
            mockObj.ovrp_GetSkeleton2(skeletonType, out skeleton);

        public static Result ovrp_PollEvent(ref EventDataBuffer eventDataBuffer) =>
            mockObj.ovrp_PollEvent(ref eventDataBuffer);

        public static Result ovrp_GetNativeXrApiType(out XrApi xrApi) =>
            mockObj.ovrp_GetNativeXrApiType(out xrApi);

        public static Result ovrp_GetNativeOpenXRHandles(out UInt64 xrInstance, out UInt64 xrSession) =>
            mockObj.ovrp_GetNativeOpenXRHandles(out xrInstance, out xrSession);
    }

    public class OVRP_1_55_1_TEST
    {

        public virtual Result ovrp_PollEvent2(ref EventType eventType, ref IntPtr eventData) =>
            OVRP_1_55_1_PROD.ovrp_PollEvent2(ref eventType, ref eventData);
    }

    public static class OVRP_1_55_1
    {
        public static OVRP_1_55_1_TEST mockObj = new OVRP_1_55_1_TEST();

        public static readonly System.Version version = OVRP_1_55_1_PROD.version;

        public static Result ovrp_PollEvent2(ref EventType eventType, ref IntPtr eventData) =>
            mockObj.ovrp_PollEvent2(ref eventType, ref eventData);
    }

    public class OVRP_1_64_0_TEST
    {

        public virtual Result ovrp_LocateSpace(ref Posef location, ref UInt64 space,
            TrackingOrigin trackingOrigin) =>
            OVRP_1_64_0_PROD.ovrp_LocateSpace(ref location, ref space, trackingOrigin);
    }

    public static class OVRP_1_64_0
    {
        public static OVRP_1_64_0_TEST mockObj = new OVRP_1_64_0_TEST();

        public static readonly System.Version version = OVRP_1_64_0_PROD.version;

        public static Result ovrp_LocateSpace(ref Posef location, ref UInt64 space,
            TrackingOrigin trackingOrigin) =>
            mockObj.ovrp_LocateSpace(ref location, ref space, trackingOrigin);
    }

    public class OVRP_1_65_0_TEST
    {

        public virtual Result ovrp_KtxLoadFromMemory(ref IntPtr data, uint length, ref System.IntPtr texture) =>
            OVRP_1_65_0_PROD.ovrp_KtxLoadFromMemory(ref data, length, ref texture);

        public virtual Result ovrp_KtxTextureWidth(IntPtr texture, ref uint width) =>
            OVRP_1_65_0_PROD.ovrp_KtxTextureWidth(texture, ref width);

        public virtual Result ovrp_KtxTextureHeight(IntPtr texture, ref uint height) =>
            OVRP_1_65_0_PROD.ovrp_KtxTextureHeight(texture, ref height);

        public virtual Result ovrp_KtxTranscode(IntPtr texture, uint format) =>
            OVRP_1_65_0_PROD.ovrp_KtxTranscode(texture, format);

        public virtual Result ovrp_KtxGetTextureData(IntPtr texture, IntPtr data, uint bufferSize) =>
            OVRP_1_65_0_PROD.ovrp_KtxGetTextureData(texture, data, bufferSize);

        public virtual Result ovrp_KtxTextureSize(IntPtr texture, ref uint size) =>
            OVRP_1_65_0_PROD.ovrp_KtxTextureSize(texture, ref size);

        public virtual Result ovrp_KtxDestroy(IntPtr texture) =>
            OVRP_1_65_0_PROD.ovrp_KtxDestroy(texture);

        public virtual Result ovrp_DestroySpace(ref UInt64 space) =>
            OVRP_1_65_0_PROD.ovrp_DestroySpace(ref space);
    }

    public static class OVRP_1_65_0
    {
        public static OVRP_1_65_0_TEST mockObj = new OVRP_1_65_0_TEST();

        public static readonly System.Version version = OVRP_1_65_0_PROD.version;

        public static Result ovrp_KtxLoadFromMemory(ref IntPtr data, uint length, ref System.IntPtr texture) =>
            mockObj.ovrp_KtxLoadFromMemory(ref data, length, ref texture);

        public static Result ovrp_KtxTextureWidth(IntPtr texture, ref uint width) =>
            mockObj.ovrp_KtxTextureWidth(texture, ref width);

        public static Result ovrp_KtxTextureHeight(IntPtr texture, ref uint height) =>
            mockObj.ovrp_KtxTextureHeight(texture, ref height);

        public static Result ovrp_KtxTranscode(IntPtr texture, uint format) =>
            mockObj.ovrp_KtxTranscode(texture, format);

        public static Result ovrp_KtxGetTextureData(IntPtr texture, IntPtr data, uint bufferSize) =>
            mockObj.ovrp_KtxGetTextureData(texture, data, bufferSize);

        public static Result ovrp_KtxTextureSize(IntPtr texture, ref uint size) =>
            mockObj.ovrp_KtxTextureSize(texture, ref size);

        public static Result ovrp_KtxDestroy(IntPtr texture) =>
            mockObj.ovrp_KtxDestroy(texture);

        public static Result ovrp_DestroySpace(ref UInt64 space) =>
            mockObj.ovrp_DestroySpace(ref space);
    }

    public class OVRP_1_66_0_TEST
    {

        public virtual Result ovrp_GetInsightPassthroughInitializationState() =>
            OVRP_1_66_0_PROD.ovrp_GetInsightPassthroughInitializationState();

        public virtual Result ovrp_Media_IsCastingToRemoteClient(out Bool isCasting) =>
            OVRP_1_66_0_PROD.ovrp_Media_IsCastingToRemoteClient(out isCasting);
    }

    public static class OVRP_1_66_0
    {
        public static OVRP_1_66_0_TEST mockObj = new OVRP_1_66_0_TEST();

        public static readonly System.Version version = OVRP_1_66_0_PROD.version;

        public static Result ovrp_GetInsightPassthroughInitializationState() =>
            mockObj.ovrp_GetInsightPassthroughInitializationState();

        public static Result ovrp_Media_IsCastingToRemoteClient(out Bool isCasting) =>
            mockObj.ovrp_Media_IsCastingToRemoteClient(out isCasting);
    }

    public class OVRP_1_67_0_TEST
    {
    }

    public static class OVRP_1_67_0
    {
        public static OVRP_1_67_0_TEST mockObj = new OVRP_1_67_0_TEST();

        public static readonly System.Version version = OVRP_1_67_0_PROD.version;
    }

    public class OVRP_1_68_0_TEST
    {

        public const int OVRP_RENDER_MODEL_MAX_PATH_LENGTH = 256;
        public const int OVRP_RENDER_MODEL_MAX_NAME_LENGTH = 64;

        public virtual Result ovrp_LoadRenderModel(UInt64 modelKey, uint bufferInputCapacity,
            ref uint bufferCountOutput, IntPtr buffer) =>
            OVRP_1_68_0_PROD.ovrp_LoadRenderModel(modelKey, bufferInputCapacity, ref bufferCountOutput, buffer);

        public virtual Result ovrp_GetRenderModelPaths(uint index, IntPtr path) =>
            OVRP_1_68_0_PROD.ovrp_GetRenderModelPaths(index, path);

        public virtual Result ovrp_GetRenderModelProperties(string path,
            out RenderModelPropertiesInternal properties) =>
            OVRP_1_68_0_PROD.ovrp_GetRenderModelProperties(path, out properties);

        public virtual Result ovrp_SetInsightPassthroughKeyboardHandsIntensity(int layerId,
            InsightPassthroughKeyboardHandsIntensity intensity) =>
            OVRP_1_68_0_PROD.ovrp_SetInsightPassthroughKeyboardHandsIntensity(layerId, intensity);

        public virtual Result ovrp_StartKeyboardTracking(UInt64 trackedKeyboardId) =>
            OVRP_1_68_0_PROD.ovrp_StartKeyboardTracking(trackedKeyboardId);

        public virtual Result ovrp_StopKeyboardTracking() =>
            OVRP_1_68_0_PROD.ovrp_StopKeyboardTracking();

        public virtual Result ovrp_GetSystemKeyboardDescription(TrackedKeyboardQueryFlags keyboardQueryFlags,
            out KeyboardDescription keyboardDescription) =>
            OVRP_1_68_0_PROD.ovrp_GetSystemKeyboardDescription(keyboardQueryFlags, out keyboardDescription);

        public virtual Result ovrp_GetKeyboardState(Step stepId, int frameIndex, out KeyboardState keyboardState) =>
            OVRP_1_68_0_PROD.ovrp_GetKeyboardState(stepId, frameIndex, out keyboardState);
    }

    public static class OVRP_1_68_0
    {
        public static OVRP_1_68_0_TEST mockObj = new OVRP_1_68_0_TEST();

        public static readonly System.Version version = OVRP_1_68_0_PROD.version;

        public const int OVRP_RENDER_MODEL_MAX_PATH_LENGTH = 256;
        public const int OVRP_RENDER_MODEL_MAX_NAME_LENGTH = 64;

        public static Result ovrp_LoadRenderModel(UInt64 modelKey, uint bufferInputCapacity,
            ref uint bufferCountOutput, IntPtr buffer) =>
            mockObj.ovrp_LoadRenderModel(modelKey, bufferInputCapacity, ref bufferCountOutput, buffer);

        public static Result ovrp_GetRenderModelPaths(uint index, IntPtr path) =>
            mockObj.ovrp_GetRenderModelPaths(index, path);

        public static Result ovrp_GetRenderModelProperties(string path,
            out RenderModelPropertiesInternal properties) =>
            mockObj.ovrp_GetRenderModelProperties(path, out properties);

        public static Result ovrp_SetInsightPassthroughKeyboardHandsIntensity(int layerId,
            InsightPassthroughKeyboardHandsIntensity intensity) =>
            mockObj.ovrp_SetInsightPassthroughKeyboardHandsIntensity(layerId, intensity);

        public static Result ovrp_StartKeyboardTracking(UInt64 trackedKeyboardId) =>
            mockObj.ovrp_StartKeyboardTracking(trackedKeyboardId);

        public static Result ovrp_StopKeyboardTracking() =>
            mockObj.ovrp_StopKeyboardTracking();

        public static Result ovrp_GetSystemKeyboardDescription(TrackedKeyboardQueryFlags keyboardQueryFlags,
            out KeyboardDescription keyboardDescription) =>
            mockObj.ovrp_GetSystemKeyboardDescription(keyboardQueryFlags, out keyboardDescription);

        public static Result ovrp_GetKeyboardState(Step stepId, int frameIndex, out KeyboardState keyboardState) =>
            mockObj.ovrp_GetKeyboardState(stepId, frameIndex, out keyboardState);
    }

    public class OVRP_1_69_0_TEST
    {

        public virtual Result ovrp_GetNodePoseStateImmediate(Node nodeId, out PoseStatef nodePoseState) =>
            OVRP_1_69_0_PROD.ovrp_GetNodePoseStateImmediate(nodeId, out nodePoseState);

#if OVR_INTERNAL_CODE
        public virtual Result ovrp_SetNativeSDKPropertyBool(int propertyEnum, Bool enabled) =>
            OVRP_1_69_0_PROD.ovrp_SetNativeSDKPropertyBool(propertyEnum, enabled);

        public virtual Result ovrp_GetNativeSDKPropertyBool(int propertyEnum, ref Bool enabled) =>
            OVRP_1_69_0_PROD.ovrp_GetNativeSDKPropertyBool(propertyEnum, ref enabled);
#endif
    }

    public static class OVRP_1_69_0
    {
        public static OVRP_1_69_0_TEST mockObj = new OVRP_1_69_0_TEST();

        public static readonly System.Version version = OVRP_1_69_0_PROD.version;

        public static Result ovrp_GetNodePoseStateImmediate(Node nodeId, out PoseStatef nodePoseState) =>
            mockObj.ovrp_GetNodePoseStateImmediate(nodeId, out nodePoseState);

#if OVR_INTERNAL_CODE
        public static Result ovrp_SetNativeSDKPropertyBool(int propertyEnum, Bool enabled) =>
            mockObj.ovrp_SetNativeSDKPropertyBool(propertyEnum, enabled);

        public static Result ovrp_GetNativeSDKPropertyBool(int propertyEnum, ref Bool enabled) =>
            mockObj.ovrp_GetNativeSDKPropertyBool(propertyEnum, ref enabled);
#endif
    }

    public class OVRP_1_70_0_TEST
    {

        public virtual Result ovrp_SetLogCallback2(LogCallback2DelegateType logCallback) =>
            OVRP_1_70_0_PROD.ovrp_SetLogCallback2(logCallback);
    }

    public static class OVRP_1_70_0
    {
        public static OVRP_1_70_0_TEST mockObj = new OVRP_1_70_0_TEST();

        public static readonly System.Version version = OVRP_1_70_0_PROD.version;

        public static Result ovrp_SetLogCallback2(LogCallback2DelegateType logCallback) =>
            mockObj.ovrp_SetLogCallback2(logCallback);
    }

    public class OVRP_1_71_0_TEST
    {

        public virtual Result ovrp_IsInsightPassthroughSupported(ref Bool supported) =>
            OVRP_1_71_0_PROD.ovrp_IsInsightPassthroughSupported(ref supported);

        public virtual void ovrp_UnityOpenXR_SetClientVersion(int majorVersion, int minorVersion,
            int patchVersion) =>
            OVRP_1_71_0_PROD.ovrp_UnityOpenXR_SetClientVersion(majorVersion, minorVersion, patchVersion);

        public virtual IntPtr ovrp_UnityOpenXR_HookGetInstanceProcAddr(IntPtr func) =>
            OVRP_1_71_0_PROD.ovrp_UnityOpenXR_HookGetInstanceProcAddr(func);

        public virtual Result ovrp_UnityOpenXR_OnInstanceCreate(UInt64 xrInstance) =>
            OVRP_1_71_0_PROD.ovrp_UnityOpenXR_OnInstanceCreate(xrInstance);

        public virtual void ovrp_UnityOpenXR_OnInstanceDestroy(UInt64 xrInstance) =>
            OVRP_1_71_0_PROD.ovrp_UnityOpenXR_OnInstanceDestroy(xrInstance);

        public virtual void ovrp_UnityOpenXR_OnSessionCreate(UInt64 xrSession) =>
            OVRP_1_71_0_PROD.ovrp_UnityOpenXR_OnSessionCreate(xrSession);

        public virtual void ovrp_UnityOpenXR_OnAppSpaceChange(UInt64 xrSpace) =>
            OVRP_1_71_0_PROD.ovrp_UnityOpenXR_OnAppSpaceChange(xrSpace);

        public virtual void ovrp_UnityOpenXR_OnSessionStateChange(int oldState, int newState) =>
            OVRP_1_71_0_PROD.ovrp_UnityOpenXR_OnSessionStateChange(oldState, newState);

        public virtual void ovrp_UnityOpenXR_OnSessionBegin(UInt64 xrSession) =>
            OVRP_1_71_0_PROD.ovrp_UnityOpenXR_OnSessionBegin(xrSession);

        public virtual void ovrp_UnityOpenXR_OnSessionEnd(UInt64 xrSession) =>
            OVRP_1_71_0_PROD.ovrp_UnityOpenXR_OnSessionEnd(xrSession);

        public virtual void ovrp_UnityOpenXR_OnSessionExiting(UInt64 xrSession) =>
            OVRP_1_71_0_PROD.ovrp_UnityOpenXR_OnSessionExiting(xrSession);

        public virtual void ovrp_UnityOpenXR_OnSessionDestroy(UInt64 xrSession) =>
            OVRP_1_71_0_PROD.ovrp_UnityOpenXR_OnSessionDestroy(xrSession);

        public virtual Result ovrp_SetSuggestedCpuPerformanceLevel(ProcessorPerformanceLevel perfLevel) =>
            OVRP_1_71_0_PROD.ovrp_SetSuggestedCpuPerformanceLevel(perfLevel);

        public virtual Result ovrp_GetSuggestedCpuPerformanceLevel(out ProcessorPerformanceLevel perfLevel) =>
            OVRP_1_71_0_PROD.ovrp_GetSuggestedCpuPerformanceLevel(out perfLevel);

        public virtual Result ovrp_SetSuggestedGpuPerformanceLevel(ProcessorPerformanceLevel perfLevel) =>
            OVRP_1_71_0_PROD.ovrp_SetSuggestedGpuPerformanceLevel(perfLevel);

        public virtual Result ovrp_GetSuggestedGpuPerformanceLevel(out ProcessorPerformanceLevel perfLevel) =>
            OVRP_1_71_0_PROD.ovrp_GetSuggestedGpuPerformanceLevel(out perfLevel);

#if OVR_INTERNAL_CODE
        public virtual Result ovrp_GetKeyboardRawContrastParams(UInt64 trackedKeyboardId,
            out KeyboardTrackingContrastParams contrastParams) =>
            OVRP_1_71_0_PROD.ovrp_GetKeyboardRawContrastParams(trackedKeyboardId, out contrastParams);
#endif
    }

    public static class OVRP_1_71_0
    {
        public static OVRP_1_71_0_TEST mockObj = new OVRP_1_71_0_TEST();

        public static readonly System.Version version = OVRP_1_71_0_PROD.version;

        public static Result ovrp_IsInsightPassthroughSupported(ref Bool supported) =>
            mockObj.ovrp_IsInsightPassthroughSupported(ref supported);

        public static void ovrp_UnityOpenXR_SetClientVersion(int majorVersion, int minorVersion,
            int patchVersion) =>
            mockObj.ovrp_UnityOpenXR_SetClientVersion(majorVersion, minorVersion, patchVersion);

        public static IntPtr ovrp_UnityOpenXR_HookGetInstanceProcAddr(IntPtr func) =>
            mockObj.ovrp_UnityOpenXR_HookGetInstanceProcAddr(func);

        public static Result ovrp_UnityOpenXR_OnInstanceCreate(UInt64 xrInstance) =>
            mockObj.ovrp_UnityOpenXR_OnInstanceCreate(xrInstance);

        public static void ovrp_UnityOpenXR_OnInstanceDestroy(UInt64 xrInstance) =>
            mockObj.ovrp_UnityOpenXR_OnInstanceDestroy(xrInstance);

        public static void ovrp_UnityOpenXR_OnSessionCreate(UInt64 xrSession) =>
            mockObj.ovrp_UnityOpenXR_OnSessionCreate(xrSession);

        public static void ovrp_UnityOpenXR_OnAppSpaceChange(UInt64 xrSpace) =>
            mockObj.ovrp_UnityOpenXR_OnAppSpaceChange(xrSpace);

        public static void ovrp_UnityOpenXR_OnSessionStateChange(int oldState, int newState) =>
            mockObj.ovrp_UnityOpenXR_OnSessionStateChange(oldState, newState);

        public static void ovrp_UnityOpenXR_OnSessionBegin(UInt64 xrSession) =>
            mockObj.ovrp_UnityOpenXR_OnSessionBegin(xrSession);

        public static void ovrp_UnityOpenXR_OnSessionEnd(UInt64 xrSession) =>
            mockObj.ovrp_UnityOpenXR_OnSessionEnd(xrSession);

        public static void ovrp_UnityOpenXR_OnSessionExiting(UInt64 xrSession) =>
            mockObj.ovrp_UnityOpenXR_OnSessionExiting(xrSession);

        public static void ovrp_UnityOpenXR_OnSessionDestroy(UInt64 xrSession) =>
            mockObj.ovrp_UnityOpenXR_OnSessionDestroy(xrSession);

        public static Result ovrp_SetSuggestedCpuPerformanceLevel(ProcessorPerformanceLevel perfLevel) =>
            mockObj.ovrp_SetSuggestedCpuPerformanceLevel(perfLevel);

        public static Result ovrp_GetSuggestedCpuPerformanceLevel(out ProcessorPerformanceLevel perfLevel) =>
            mockObj.ovrp_GetSuggestedCpuPerformanceLevel(out perfLevel);

        public static Result ovrp_SetSuggestedGpuPerformanceLevel(ProcessorPerformanceLevel perfLevel) =>
            mockObj.ovrp_SetSuggestedGpuPerformanceLevel(perfLevel);

        public static Result ovrp_GetSuggestedGpuPerformanceLevel(out ProcessorPerformanceLevel perfLevel) =>
            mockObj.ovrp_GetSuggestedGpuPerformanceLevel(out perfLevel);

#if OVR_INTERNAL_CODE
        public static Result ovrp_GetKeyboardRawContrastParams(UInt64 trackedKeyboardId,
            out KeyboardTrackingContrastParams contrastParams) =>
            mockObj.ovrp_GetKeyboardRawContrastParams(trackedKeyboardId, out contrastParams);
#endif
    }

    public class OVRP_1_72_0_TEST
    {

        public virtual Result ovrp_CreateSpatialAnchor(ref SpatialAnchorCreateInfo createInfo,
            out UInt64 requestId) =>
            OVRP_1_72_0_PROD.ovrp_CreateSpatialAnchor(ref createInfo, out requestId);

        public virtual Result ovrp_SetSpaceComponentStatus(ref UInt64 space, SpaceComponentType componentType,
            Bool enable, double timeout, out UInt64 requestId) =>
            OVRP_1_72_0_PROD.ovrp_SetSpaceComponentStatus(ref space, componentType, enable, timeout, out requestId);

        public virtual Result ovrp_GetSpaceComponentStatus(ref UInt64 space, SpaceComponentType componentType,
            out Bool enabled, out Bool changePending) =>
            OVRP_1_72_0_PROD.ovrp_GetSpaceComponentStatus(ref space, componentType, out enabled, out changePending);

        public virtual Result ovrp_EnumerateSpaceSupportedComponents(ref UInt64 space,
            uint componentTypesCapacityInput, out uint componentTypesCountOutput,
             SpaceComponentType[] componentTypes) =>
            OVRP_1_72_0_PROD.ovrp_EnumerateSpaceSupportedComponents(ref space, componentTypesCapacityInput, out componentTypesCountOutput, componentTypes);

        public virtual unsafe Result ovrp_EnumerateSpaceSupportedComponents(ref UInt64 space,
            uint componentTypesCapacityInput, out uint componentTypesCountOutput,
            SpaceComponentType* componentTypes) =>
            OVRP_1_72_0_PROD.ovrp_EnumerateSpaceSupportedComponents(ref space, componentTypesCapacityInput, out componentTypesCountOutput, componentTypes);

        public virtual Result ovrp_SaveSpace(ref UInt64 space, SpaceStorageLocation location,
            SpaceStoragePersistenceMode mode, out UInt64 requestId) =>
            OVRP_1_72_0_PROD.ovrp_SaveSpace(ref space, location, mode, out requestId);

        public virtual Result ovrp_QuerySpaces(ref SpaceQueryInfo queryInfo, out UInt64 requestId) =>
            OVRP_1_72_0_PROD.ovrp_QuerySpaces(ref queryInfo, out requestId);

        public virtual Result ovrp_RetrieveSpaceQueryResults(ref UInt64 requestId, UInt32 resultCapacityInput,
            ref UInt32 resultCountOutput, System.IntPtr results) =>
            OVRP_1_72_0_PROD.ovrp_RetrieveSpaceQueryResults(ref requestId, resultCapacityInput, ref resultCountOutput, results);

        public virtual Result ovrp_EraseSpace(ref UInt64 space, SpaceStorageLocation location,
            out UInt64 requestId) =>
            OVRP_1_72_0_PROD.ovrp_EraseSpace(ref space, location, out requestId);

        public virtual Result ovrp_GetSpaceContainer(ref UInt64 space,
            ref SpaceContainerInternal containerInternal) =>
            OVRP_1_72_0_PROD.ovrp_GetSpaceContainer(ref space, ref containerInternal);

        public virtual Result ovrp_GetSpaceBoundingBox2D(ref UInt64 space, out Rectf rect) =>
            OVRP_1_72_0_PROD.ovrp_GetSpaceBoundingBox2D(ref space, out rect);

        public virtual Result ovrp_GetSpaceBoundingBox3D(ref UInt64 space, out Boundsf bounds) =>
            OVRP_1_72_0_PROD.ovrp_GetSpaceBoundingBox3D(ref space, out bounds);

        public virtual Result ovrp_GetSpaceSemanticLabels(ref UInt64 space,
            ref SpaceSemanticLabelInternal labelsInternal) =>
            OVRP_1_72_0_PROD.ovrp_GetSpaceSemanticLabels(ref space, ref labelsInternal);

        public virtual Result ovrp_GetSpaceRoomLayout(ref UInt64 space,
            ref RoomLayoutInternal roomLayoutInternal) =>
            OVRP_1_72_0_PROD.ovrp_GetSpaceRoomLayout(ref space, ref roomLayoutInternal);

        public virtual Result ovrp_GetSpaceBoundary2D(ref UInt64 space,
            ref PolygonalBoundary2DInternal boundaryInternal) =>
            OVRP_1_72_0_PROD.ovrp_GetSpaceBoundary2D(ref space, ref boundaryInternal);

        public virtual Result ovrp_RequestSceneCapture(ref SceneCaptureRequestInternal request,
            out UInt64 requestId) =>
            OVRP_1_72_0_PROD.ovrp_RequestSceneCapture(ref request, out requestId);
    }

    public static class OVRP_1_72_0
    {
        public static OVRP_1_72_0_TEST mockObj = new OVRP_1_72_0_TEST();

        public static readonly System.Version version = OVRP_1_72_0_PROD.version;

        public static Result ovrp_CreateSpatialAnchor(ref SpatialAnchorCreateInfo createInfo,
            out UInt64 requestId) =>
            mockObj.ovrp_CreateSpatialAnchor(ref createInfo, out requestId);

        public static Result ovrp_SetSpaceComponentStatus(ref UInt64 space, SpaceComponentType componentType,
            Bool enable, double timeout, out UInt64 requestId) =>
            mockObj.ovrp_SetSpaceComponentStatus(ref space, componentType, enable, timeout, out requestId);

        public static Result ovrp_GetSpaceComponentStatus(ref UInt64 space, SpaceComponentType componentType,
            out Bool enabled, out Bool changePending) =>
            mockObj.ovrp_GetSpaceComponentStatus(ref space, componentType, out enabled, out changePending);

        public static Result ovrp_EnumerateSpaceSupportedComponents(ref UInt64 space,
            uint componentTypesCapacityInput, out uint componentTypesCountOutput,
             SpaceComponentType[] componentTypes) =>
            mockObj.ovrp_EnumerateSpaceSupportedComponents(ref space, componentTypesCapacityInput, out componentTypesCountOutput, componentTypes);

        public static unsafe Result ovrp_EnumerateSpaceSupportedComponents(ref UInt64 space,
            uint componentTypesCapacityInput, out uint componentTypesCountOutput,
            SpaceComponentType* componentTypes) =>
            mockObj.ovrp_EnumerateSpaceSupportedComponents(ref space, componentTypesCapacityInput, out componentTypesCountOutput, componentTypes);

        public static Result ovrp_SaveSpace(ref UInt64 space, SpaceStorageLocation location,
            SpaceStoragePersistenceMode mode, out UInt64 requestId) =>
            mockObj.ovrp_SaveSpace(ref space, location, mode, out requestId);

        public static Result ovrp_QuerySpaces(ref SpaceQueryInfo queryInfo, out UInt64 requestId) =>
            mockObj.ovrp_QuerySpaces(ref queryInfo, out requestId);

        public static Result ovrp_RetrieveSpaceQueryResults(ref UInt64 requestId, UInt32 resultCapacityInput,
            ref UInt32 resultCountOutput, System.IntPtr results) =>
            mockObj.ovrp_RetrieveSpaceQueryResults(ref requestId, resultCapacityInput, ref resultCountOutput, results);

        public static Result ovrp_EraseSpace(ref UInt64 space, SpaceStorageLocation location,
            out UInt64 requestId) =>
            mockObj.ovrp_EraseSpace(ref space, location, out requestId);

        public static Result ovrp_GetSpaceContainer(ref UInt64 space,
            ref SpaceContainerInternal containerInternal) =>
            mockObj.ovrp_GetSpaceContainer(ref space, ref containerInternal);

        public static Result ovrp_GetSpaceBoundingBox2D(ref UInt64 space, out Rectf rect) =>
            mockObj.ovrp_GetSpaceBoundingBox2D(ref space, out rect);

        public static Result ovrp_GetSpaceBoundingBox3D(ref UInt64 space, out Boundsf bounds) =>
            mockObj.ovrp_GetSpaceBoundingBox3D(ref space, out bounds);

        public static Result ovrp_GetSpaceSemanticLabels(ref UInt64 space,
            ref SpaceSemanticLabelInternal labelsInternal) =>
            mockObj.ovrp_GetSpaceSemanticLabels(ref space, ref labelsInternal);

        public static Result ovrp_GetSpaceRoomLayout(ref UInt64 space,
            ref RoomLayoutInternal roomLayoutInternal) =>
            mockObj.ovrp_GetSpaceRoomLayout(ref space, ref roomLayoutInternal);

        public static Result ovrp_GetSpaceBoundary2D(ref UInt64 space,
            ref PolygonalBoundary2DInternal boundaryInternal) =>
            mockObj.ovrp_GetSpaceBoundary2D(ref space, ref boundaryInternal);

        public static Result ovrp_RequestSceneCapture(ref SceneCaptureRequestInternal request,
            out UInt64 requestId) =>
            mockObj.ovrp_RequestSceneCapture(ref request, out requestId);
    }

    public class OVRP_1_73_0_TEST
    {

#if OVR_INTERNAL_CODE
        public virtual Result ovrp_CreatePlaneTracker(ref PlaneTrackerBaseCreateInfo createInfo,
            out UInt64 requestId) =>
            OVRP_1_73_0_PROD.ovrp_CreatePlaneTracker(ref createInfo, out requestId);

        public virtual Result ovrp_DestroyPlaneTracker(out UInt64 requestId) =>
            OVRP_1_73_0_PROD.ovrp_DestroyPlaneTracker(out requestId);

        public virtual Result ovrp_GetSpaceHeightMap(ref UInt64 space, ref HeightMapInternal heightMapInternal) =>
            OVRP_1_73_0_PROD.ovrp_GetSpaceHeightMap(ref space, ref heightMapInternal);
#endif // OVR_INTERNAL_CODE
    }

    public static class OVRP_1_73_0
    {
        public static OVRP_1_73_0_TEST mockObj = new OVRP_1_73_0_TEST();

        public static readonly System.Version version = OVRP_1_73_0_PROD.version;

#if OVR_INTERNAL_CODE
        public static Result ovrp_CreatePlaneTracker(ref PlaneTrackerBaseCreateInfo createInfo,
            out UInt64 requestId) =>
            mockObj.ovrp_CreatePlaneTracker(ref createInfo, out requestId);

        public static Result ovrp_DestroyPlaneTracker(out UInt64 requestId) =>
            mockObj.ovrp_DestroyPlaneTracker(out requestId);

        public static Result ovrp_GetSpaceHeightMap(ref UInt64 space, ref HeightMapInternal heightMapInternal) =>
            mockObj.ovrp_GetSpaceHeightMap(ref space, ref heightMapInternal);
#endif // OVR_INTERNAL_CODE
    }

    public class OVRP_1_74_0_TEST
    {

        public virtual Result ovrp_GetSpaceUuid(in UInt64 space, out Guid uuid) =>
            OVRP_1_74_0_PROD.ovrp_GetSpaceUuid(in space, out uuid);

        public virtual Result ovrp_CreateVirtualKeyboard(VirtualKeyboardCreateInfo createInfo) =>
            OVRP_1_74_0_PROD.ovrp_CreateVirtualKeyboard(createInfo);

        public virtual Result ovrp_DestroyVirtualKeyboard() =>
            OVRP_1_74_0_PROD.ovrp_DestroyVirtualKeyboard();

        public virtual Result ovrp_SendVirtualKeyboardInput(VirtualKeyboardInputInfo inputInfo,
            ref Posef interactorRootPose) =>
            OVRP_1_74_0_PROD.ovrp_SendVirtualKeyboardInput(inputInfo, ref interactorRootPose);

        public virtual Result ovrp_ChangeVirtualKeyboardTextContext(string textContext) =>
            OVRP_1_74_0_PROD.ovrp_ChangeVirtualKeyboardTextContext(textContext);

        public virtual Result ovrp_CreateVirtualKeyboardSpace(VirtualKeyboardSpaceCreateInfo createInfo,
            out UInt64 keyboardSpace) =>
            OVRP_1_74_0_PROD.ovrp_CreateVirtualKeyboardSpace(createInfo, out keyboardSpace);

        public virtual Result ovrp_SuggestVirtualKeyboardLocation(VirtualKeyboardLocationInfo locationInfo) =>
            OVRP_1_74_0_PROD.ovrp_SuggestVirtualKeyboardLocation(locationInfo);

        public virtual Result ovrp_GetVirtualKeyboardScale(out float location) =>
            OVRP_1_74_0_PROD.ovrp_GetVirtualKeyboardScale(out location);

#if OVR_INTERNAL_CODE

        public virtual Result ovrp_InitializeFiducialTracking() =>
            OVRP_1_74_0_PROD.ovrp_InitializeFiducialTracking();

        public virtual Result ovrp_ShutdownFiducialTracking() =>
            OVRP_1_74_0_PROD.ovrp_ShutdownFiducialTracking();

        public virtual Result ovrp_GetTrackedFiducials(UInt32 bufferCapacityInput, out UInt32 bufferCountOutput,
            IntPtr buffer) =>
            OVRP_1_74_0_PROD.ovrp_GetTrackedFiducials(bufferCapacityInput, out bufferCountOutput, buffer);

        public virtual Result ovrp_GetFiducialState(Guid id, out FiducialState state) =>
            OVRP_1_74_0_PROD.ovrp_GetFiducialState(id, out state);

        public virtual Result ovrp_GetFiducialPayload(Guid id, UInt32 bufferCapacityInput,
            out UInt32 bufferCountOutput, IntPtr buffer) =>
            OVRP_1_74_0_PROD.ovrp_GetFiducialPayload(id, bufferCapacityInput, out bufferCountOutput, buffer);

#endif

        public virtual Result ovrp_GetRenderModelProperties2(string path, RenderModelFlags flags,
            out RenderModelPropertiesInternal properties) =>
            OVRP_1_74_0_PROD.ovrp_GetRenderModelProperties2(path, flags, out properties);
    }

    public static class OVRP_1_74_0
    {
        public static OVRP_1_74_0_TEST mockObj = new OVRP_1_74_0_TEST();

        public static readonly System.Version version = OVRP_1_74_0_PROD.version;

        public static Result ovrp_GetSpaceUuid(in UInt64 space, out Guid uuid) =>
            mockObj.ovrp_GetSpaceUuid(in space, out uuid);

        public static Result ovrp_CreateVirtualKeyboard(VirtualKeyboardCreateInfo createInfo) =>
            mockObj.ovrp_CreateVirtualKeyboard(createInfo);

        public static Result ovrp_DestroyVirtualKeyboard() =>
            mockObj.ovrp_DestroyVirtualKeyboard();

        public static Result ovrp_SendVirtualKeyboardInput(VirtualKeyboardInputInfo inputInfo,
            ref Posef interactorRootPose) =>
            mockObj.ovrp_SendVirtualKeyboardInput(inputInfo, ref interactorRootPose);

        public static Result ovrp_ChangeVirtualKeyboardTextContext(string textContext) =>
            mockObj.ovrp_ChangeVirtualKeyboardTextContext(textContext);

        public static Result ovrp_CreateVirtualKeyboardSpace(VirtualKeyboardSpaceCreateInfo createInfo,
            out UInt64 keyboardSpace) =>
            mockObj.ovrp_CreateVirtualKeyboardSpace(createInfo, out keyboardSpace);

        public static Result ovrp_SuggestVirtualKeyboardLocation(VirtualKeyboardLocationInfo locationInfo) =>
            mockObj.ovrp_SuggestVirtualKeyboardLocation(locationInfo);

        public static Result ovrp_GetVirtualKeyboardScale(out float location) =>
            mockObj.ovrp_GetVirtualKeyboardScale(out location);

#if OVR_INTERNAL_CODE

        public static Result ovrp_InitializeFiducialTracking() =>
            mockObj.ovrp_InitializeFiducialTracking();

        public static Result ovrp_ShutdownFiducialTracking() =>
            mockObj.ovrp_ShutdownFiducialTracking();

        public static Result ovrp_GetTrackedFiducials(UInt32 bufferCapacityInput, out UInt32 bufferCountOutput,
            IntPtr buffer) =>
            mockObj.ovrp_GetTrackedFiducials(bufferCapacityInput, out bufferCountOutput, buffer);

        public static Result ovrp_GetFiducialState(Guid id, out FiducialState state) =>
            mockObj.ovrp_GetFiducialState(id, out state);

        public static Result ovrp_GetFiducialPayload(Guid id, UInt32 bufferCapacityInput,
            out UInt32 bufferCountOutput, IntPtr buffer) =>
            mockObj.ovrp_GetFiducialPayload(id, bufferCapacityInput, out bufferCountOutput, buffer);

#endif

        public static Result ovrp_GetRenderModelProperties2(string path, RenderModelFlags flags,
            out RenderModelPropertiesInternal properties) =>
            mockObj.ovrp_GetRenderModelProperties2(path, flags, out properties);
    }

    public class OVRP_1_75_0_TEST
    {
    }

    public static class OVRP_1_75_0
    {
        public static OVRP_1_75_0_TEST mockObj = new OVRP_1_75_0_TEST();

        public static readonly System.Version version = OVRP_1_75_0_PROD.version;
    }

    public class OVRP_1_76_0_TEST
    {

        public virtual Result ovrp_GetNodePoseStateAtTime(double time, Node nodeId, out PoseStatef nodePoseState) =>
            OVRP_1_76_0_PROD.ovrp_GetNodePoseStateAtTime(time, nodeId, out nodePoseState);

#if OVR_INTERNAL_CODE
        public virtual Result ovrp_GetWristbandState(ref WristbandState wristbandState) =>
            OVRP_1_76_0_PROD.ovrp_GetWristbandState(ref wristbandState);
#endif
    }

    public static class OVRP_1_76_0
    {
        public static OVRP_1_76_0_TEST mockObj = new OVRP_1_76_0_TEST();

        public static readonly System.Version version = OVRP_1_76_0_PROD.version;

        public static Result ovrp_GetNodePoseStateAtTime(double time, Node nodeId, out PoseStatef nodePoseState) =>
            mockObj.ovrp_GetNodePoseStateAtTime(time, nodeId, out nodePoseState);

#if OVR_INTERNAL_CODE
        public static Result ovrp_GetWristbandState(ref WristbandState wristbandState) =>
            mockObj.ovrp_GetWristbandState(ref wristbandState);
#endif
    }

    public class OVRP_1_78_0_TEST
    {

        public virtual Result ovrp_GetPassthroughCapabilityFlags(ref PassthroughCapabilityFlags capabilityFlags) =>
            OVRP_1_78_0_PROD.ovrp_GetPassthroughCapabilityFlags(ref capabilityFlags);

        public virtual Result ovrp_GetFoveationEyeTrackedSupported(out Bool foveationSupported) =>
            OVRP_1_78_0_PROD.ovrp_GetFoveationEyeTrackedSupported(out foveationSupported);

        public virtual Result ovrp_GetFoveationEyeTracked(out Bool isEyeTrackedFoveation) =>
            OVRP_1_78_0_PROD.ovrp_GetFoveationEyeTracked(out isEyeTrackedFoveation);

        public virtual Result ovrp_SetFoveationEyeTracked(Bool isEyeTrackedFoveation) =>
            OVRP_1_78_0_PROD.ovrp_SetFoveationEyeTracked(isEyeTrackedFoveation);

        public virtual Result ovrp_StartFaceTracking() =>
            OVRP_1_78_0_PROD.ovrp_StartFaceTracking();

        public virtual Result ovrp_StopFaceTracking() =>
            OVRP_1_78_0_PROD.ovrp_StopFaceTracking();

        public virtual Result ovrp_StartBodyTracking() =>
            OVRP_1_78_0_PROD.ovrp_StartBodyTracking();

        public virtual Result ovrp_StopBodyTracking() =>
            OVRP_1_78_0_PROD.ovrp_StopBodyTracking();

        public virtual Result ovrp_StartEyeTracking() =>
            OVRP_1_78_0_PROD.ovrp_StartEyeTracking();

        public virtual Result ovrp_StopEyeTracking() =>
            OVRP_1_78_0_PROD.ovrp_StopEyeTracking();

        public virtual Result ovrp_GetEyeTrackingSupported(out Bool eyeTrackingSupported) =>
            OVRP_1_78_0_PROD.ovrp_GetEyeTrackingSupported(out eyeTrackingSupported);

        public virtual Result ovrp_GetFaceTrackingSupported(out Bool faceTrackingSupported) =>
            OVRP_1_78_0_PROD.ovrp_GetFaceTrackingSupported(out faceTrackingSupported);

        public virtual Result ovrp_GetBodyTrackingEnabled(out Bool value) =>
            OVRP_1_78_0_PROD.ovrp_GetBodyTrackingEnabled(out value);

        public virtual Result ovrp_GetBodyTrackingSupported(out Bool value) =>
            OVRP_1_78_0_PROD.ovrp_GetBodyTrackingSupported(out value);

        public virtual Result ovrp_GetBodyState(Step stepId, int frameIndex, out BodyStateInternal bodyState) =>
            OVRP_1_78_0_PROD.ovrp_GetBodyState(stepId, frameIndex, out bodyState);

        public virtual Result ovrp_GetFaceTrackingEnabled(out Bool faceTrackingEnabled) =>
            OVRP_1_78_0_PROD.ovrp_GetFaceTrackingEnabled(out faceTrackingEnabled);

        public virtual Result ovrp_GetFaceState(Step stepId, int frameIndex, out FaceStateInternal faceState) =>
            OVRP_1_78_0_PROD.ovrp_GetFaceState(stepId, frameIndex, out faceState);

        public virtual Result ovrp_GetEyeTrackingEnabled(out Bool eyeTrackingEnabled) =>
            OVRP_1_78_0_PROD.ovrp_GetEyeTrackingEnabled(out eyeTrackingEnabled);

        public virtual Result ovrp_GetEyeGazesState(Step stepId, int frameIndex,
            out EyeGazesStateInternal eyeGazesState) =>
            OVRP_1_78_0_PROD.ovrp_GetEyeGazesState(stepId, frameIndex, out eyeGazesState);

#if OVR_INTERNAL_CODE
        public virtual Result ovrp_FeatureFidelitySetFeatureEnable(FeatureType feature,
            FeatureEnableState featureEnableState) =>
            OVRP_1_78_0_PROD.ovrp_FeatureFidelitySetFeatureEnable(feature, featureEnableState);

        public virtual Result ovrp_FeatureFidelitySetFeatureFidelity(FeatureType feature,
            FeatureFidelity featureFidelity) =>
            OVRP_1_78_0_PROD.ovrp_FeatureFidelitySetFeatureFidelity(feature, featureFidelity);

        public virtual Result ovrp_FeatureFidelityGetFeatureState(FeatureType feature,
            out FeatureState idealState, out FeatureState currentState) =>
            OVRP_1_78_0_PROD.ovrp_FeatureFidelityGetFeatureState(feature, out idealState, out currentState);
#endif // OVR_INTERNAL_CODE

        public virtual Result ovrp_GetControllerState5(uint controllerMask, ref ControllerState5 controllerState) =>
            OVRP_1_78_0_PROD.ovrp_GetControllerState5(controllerMask, ref controllerState);

        public virtual Result ovrp_SetControllerLocalizedVibration(Controller controllerMask,
            HapticsLocation hapticsLocationMask, float frequency, float amplitude) =>
            OVRP_1_78_0_PROD.ovrp_SetControllerLocalizedVibration(controllerMask, hapticsLocationMask, frequency, amplitude);

        public virtual Result ovrp_GetLocalDimmingSupported(out Bool localDimmingSupported) =>
            OVRP_1_78_0_PROD.ovrp_GetLocalDimmingSupported(out localDimmingSupported);

        public virtual Result ovrp_SetLocalDimming(Bool localDimmingMode) =>
            OVRP_1_78_0_PROD.ovrp_SetLocalDimming(localDimmingMode);

        public virtual Result ovrp_GetLocalDimming(out Bool localDimmingMode) =>
            OVRP_1_78_0_PROD.ovrp_GetLocalDimming(out localDimmingMode);

        public virtual Result ovrp_GetCurrentInteractionProfile(Hand hand,
            out InteractionProfile interactionProfile) =>
            OVRP_1_78_0_PROD.ovrp_GetCurrentInteractionProfile(hand, out interactionProfile);

        public virtual Result ovrp_SetControllerHapticsAmplitudeEnvelope(
            Controller controllerMask,
            HapticsAmplitudeEnvelopeVibration hapticsVibration) =>
            OVRP_1_78_0_PROD.ovrp_SetControllerHapticsAmplitudeEnvelope(controllerMask, hapticsVibration);

        public virtual Result ovrp_SetControllerHapticsPcm(
            Controller controllerMask,
            HapticsPcmVibration hapticsVibration) =>
            OVRP_1_78_0_PROD.ovrp_SetControllerHapticsPcm(controllerMask, hapticsVibration);

        public virtual Result ovrp_GetControllerSampleRateHz(Controller controller, out float sampleRateHz) =>
            OVRP_1_78_0_PROD.ovrp_GetControllerSampleRateHz(controller, out sampleRateHz);
    }

    public static class OVRP_1_78_0
    {
        public static OVRP_1_78_0_TEST mockObj = new OVRP_1_78_0_TEST();

        public static readonly System.Version version = OVRP_1_78_0_PROD.version;

        public static Result ovrp_GetPassthroughCapabilityFlags(ref PassthroughCapabilityFlags capabilityFlags) =>
            mockObj.ovrp_GetPassthroughCapabilityFlags(ref capabilityFlags);

        public static Result ovrp_GetFoveationEyeTrackedSupported(out Bool foveationSupported) =>
            mockObj.ovrp_GetFoveationEyeTrackedSupported(out foveationSupported);

        public static Result ovrp_GetFoveationEyeTracked(out Bool isEyeTrackedFoveation) =>
            mockObj.ovrp_GetFoveationEyeTracked(out isEyeTrackedFoveation);

        public static Result ovrp_SetFoveationEyeTracked(Bool isEyeTrackedFoveation) =>
            mockObj.ovrp_SetFoveationEyeTracked(isEyeTrackedFoveation);

        public static Result ovrp_StartFaceTracking() =>
            mockObj.ovrp_StartFaceTracking();

        public static Result ovrp_StopFaceTracking() =>
            mockObj.ovrp_StopFaceTracking();

        public static Result ovrp_StartBodyTracking() =>
            mockObj.ovrp_StartBodyTracking();

        public static Result ovrp_StopBodyTracking() =>
            mockObj.ovrp_StopBodyTracking();

        public static Result ovrp_StartEyeTracking() =>
            mockObj.ovrp_StartEyeTracking();

        public static Result ovrp_StopEyeTracking() =>
            mockObj.ovrp_StopEyeTracking();

        public static Result ovrp_GetEyeTrackingSupported(out Bool eyeTrackingSupported) =>
            mockObj.ovrp_GetEyeTrackingSupported(out eyeTrackingSupported);

        public static Result ovrp_GetFaceTrackingSupported(out Bool faceTrackingSupported) =>
            mockObj.ovrp_GetFaceTrackingSupported(out faceTrackingSupported);

        public static Result ovrp_GetBodyTrackingEnabled(out Bool value) =>
            mockObj.ovrp_GetBodyTrackingEnabled(out value);

        public static Result ovrp_GetBodyTrackingSupported(out Bool value) =>
            mockObj.ovrp_GetBodyTrackingSupported(out value);

        public static Result ovrp_GetBodyState(Step stepId, int frameIndex, out BodyStateInternal bodyState) =>
            mockObj.ovrp_GetBodyState(stepId, frameIndex, out bodyState);

        public static Result ovrp_GetFaceTrackingEnabled(out Bool faceTrackingEnabled) =>
            mockObj.ovrp_GetFaceTrackingEnabled(out faceTrackingEnabled);

        public static Result ovrp_GetFaceState(Step stepId, int frameIndex, out FaceStateInternal faceState) =>
            mockObj.ovrp_GetFaceState(stepId, frameIndex, out faceState);

        public static Result ovrp_GetEyeTrackingEnabled(out Bool eyeTrackingEnabled) =>
            mockObj.ovrp_GetEyeTrackingEnabled(out eyeTrackingEnabled);

        public static Result ovrp_GetEyeGazesState(Step stepId, int frameIndex,
            out EyeGazesStateInternal eyeGazesState) =>
            mockObj.ovrp_GetEyeGazesState(stepId, frameIndex, out eyeGazesState);

#if OVR_INTERNAL_CODE
        public static Result ovrp_FeatureFidelitySetFeatureEnable(FeatureType feature,
            FeatureEnableState featureEnableState) =>
            mockObj.ovrp_FeatureFidelitySetFeatureEnable(feature, featureEnableState);

        public static Result ovrp_FeatureFidelitySetFeatureFidelity(FeatureType feature,
            FeatureFidelity featureFidelity) =>
            mockObj.ovrp_FeatureFidelitySetFeatureFidelity(feature, featureFidelity);

        public static Result ovrp_FeatureFidelityGetFeatureState(FeatureType feature,
            out FeatureState idealState, out FeatureState currentState) =>
            mockObj.ovrp_FeatureFidelityGetFeatureState(feature, out idealState, out currentState);
#endif // OVR_INTERNAL_CODE

        public static Result ovrp_GetControllerState5(uint controllerMask, ref ControllerState5 controllerState) =>
            mockObj.ovrp_GetControllerState5(controllerMask, ref controllerState);

        public static Result ovrp_SetControllerLocalizedVibration(Controller controllerMask,
            HapticsLocation hapticsLocationMask, float frequency, float amplitude) =>
            mockObj.ovrp_SetControllerLocalizedVibration(controllerMask, hapticsLocationMask, frequency, amplitude);

        public static Result ovrp_GetLocalDimmingSupported(out Bool localDimmingSupported) =>
            mockObj.ovrp_GetLocalDimmingSupported(out localDimmingSupported);

        public static Result ovrp_SetLocalDimming(Bool localDimmingMode) =>
            mockObj.ovrp_SetLocalDimming(localDimmingMode);

        public static Result ovrp_GetLocalDimming(out Bool localDimmingMode) =>
            mockObj.ovrp_GetLocalDimming(out localDimmingMode);

        public static Result ovrp_GetCurrentInteractionProfile(Hand hand,
            out InteractionProfile interactionProfile) =>
            mockObj.ovrp_GetCurrentInteractionProfile(hand, out interactionProfile);

        public static Result ovrp_SetControllerHapticsAmplitudeEnvelope(
            Controller controllerMask,
            HapticsAmplitudeEnvelopeVibration hapticsVibration) =>
            mockObj.ovrp_SetControllerHapticsAmplitudeEnvelope(controllerMask, hapticsVibration);

        public static Result ovrp_SetControllerHapticsPcm(
            Controller controllerMask,
            HapticsPcmVibration hapticsVibration) =>
            mockObj.ovrp_SetControllerHapticsPcm(controllerMask, hapticsVibration);

        public static Result ovrp_GetControllerSampleRateHz(Controller controller, out float sampleRateHz) =>
            mockObj.ovrp_GetControllerSampleRateHz(controller, out sampleRateHz);
    }

    public class OVRP_1_79_0_TEST
    {

        public virtual unsafe Result ovrp_ShareSpaces(UInt64* spaces, UInt32 numSpaces, ulong* userHandles,
            UInt32 numUsers, out UInt64 requestId) =>
            OVRP_1_79_0_PROD.ovrp_ShareSpaces(spaces, numSpaces, userHandles, numUsers, out requestId);

        public virtual unsafe Result ovrp_SaveSpaceList(UInt64* spaces, UInt32 numSpaces,
            SpaceStorageLocation location, out UInt64 requestId) =>
            OVRP_1_79_0_PROD.ovrp_SaveSpaceList(spaces, numSpaces, location, out requestId);

        public virtual Result ovrp_GetSpaceUserId(in UInt64 spaceUserHandle, out UInt64 spaceUserId) =>
            OVRP_1_79_0_PROD.ovrp_GetSpaceUserId(in spaceUserHandle, out spaceUserId);

        public virtual Result ovrp_CreateSpaceUser(in UInt64 spaceUserId, out UInt64 spaceUserHandle) =>
            OVRP_1_79_0_PROD.ovrp_CreateSpaceUser(in spaceUserId, out spaceUserHandle);

        public virtual Result ovrp_DestroySpaceUser(in UInt64 userHandle) =>
            OVRP_1_79_0_PROD.ovrp_DestroySpaceUser(in userHandle);

        public virtual Result ovrp_LocateSpace2(out SpaceLocationf location, in UInt64 space,
            TrackingOrigin trackingOrigin) =>
            OVRP_1_79_0_PROD.ovrp_LocateSpace2(out location, in space, trackingOrigin);

#if OVR_INTERNAL_CODE
        public virtual Result ovrp_GetPlaneTrackingSupported(out Bool planeTrackingSupported) =>
            OVRP_1_79_0_PROD.ovrp_GetPlaneTrackingSupported(out planeTrackingSupported);

        public virtual Result ovrp_GetFoveationTemporalSupported(out Bool value) =>
            OVRP_1_79_0_PROD.ovrp_GetFoveationTemporalSupported(out value);

        public virtual Result ovrp_GetFoveationTemporal(out Bool value) =>
            OVRP_1_79_0_PROD.ovrp_GetFoveationTemporal(out value);

        public virtual Result ovrp_SetFoveationTemporal(Bool value) =>
            OVRP_1_79_0_PROD.ovrp_SetFoveationTemporal(value);
#endif

#if OVR_INTERNAL_CODE // OVR_EYE_GAZE_INTERACTION
        public virtual Result ovrp_GetEyeGazeInteractionsState(Step stepId, int frameIndex,
            out EyeGazeInteractionsStateInternal eyeGazeInteractionsState) =>
            OVRP_1_79_0_PROD.ovrp_GetEyeGazeInteractionsState(stepId, frameIndex, out eyeGazeInteractionsState);
#endif

        public virtual Result ovrp_DeclareUser(in UInt64 userId, out UInt64 userHandle) =>
            OVRP_1_79_0_PROD.ovrp_DeclareUser(in userId, out userHandle);

#if OVR_INTERNAL_CODE
        public virtual Result ovrp_GetLayerVisibility(LayerDesc layerDesc,
            Posef posf,
            Vector3f scale,
            Bool overrideTextureRect,
            ref TextureRectMatrixf textureRectMatrix,
            out float layerVisibility) =>
            OVRP_1_79_0_PROD.ovrp_GetLayerVisibility(layerDesc, posf, scale, overrideTextureRect, ref textureRectMatrix, out layerVisibility);
#endif // OVR_INTERNAL_CODE
    }

    public static class OVRP_1_79_0
    {
        public static OVRP_1_79_0_TEST mockObj = new OVRP_1_79_0_TEST();

        public static readonly System.Version version = OVRP_1_79_0_PROD.version;

        public static unsafe Result ovrp_ShareSpaces(UInt64* spaces, UInt32 numSpaces, ulong* userHandles,
            UInt32 numUsers, out UInt64 requestId) =>
            mockObj.ovrp_ShareSpaces(spaces, numSpaces, userHandles, numUsers, out requestId);

        public static unsafe Result ovrp_SaveSpaceList(UInt64* spaces, UInt32 numSpaces,
            SpaceStorageLocation location, out UInt64 requestId) =>
            mockObj.ovrp_SaveSpaceList(spaces, numSpaces, location, out requestId);

        public static Result ovrp_GetSpaceUserId(in UInt64 spaceUserHandle, out UInt64 spaceUserId) =>
            mockObj.ovrp_GetSpaceUserId(in spaceUserHandle, out spaceUserId);

        public static Result ovrp_CreateSpaceUser(in UInt64 spaceUserId, out UInt64 spaceUserHandle) =>
            mockObj.ovrp_CreateSpaceUser(in spaceUserId, out spaceUserHandle);

        public static Result ovrp_DestroySpaceUser(in UInt64 userHandle) =>
            mockObj.ovrp_DestroySpaceUser(in userHandle);

        public static Result ovrp_LocateSpace2(out SpaceLocationf location, in UInt64 space,
            TrackingOrigin trackingOrigin) =>
            mockObj.ovrp_LocateSpace2(out location, in space, trackingOrigin);

#if OVR_INTERNAL_CODE
        public static Result ovrp_GetPlaneTrackingSupported(out Bool planeTrackingSupported) =>
            mockObj.ovrp_GetPlaneTrackingSupported(out planeTrackingSupported);

        public static Result ovrp_GetFoveationTemporalSupported(out Bool value) =>
            mockObj.ovrp_GetFoveationTemporalSupported(out value);

        public static Result ovrp_GetFoveationTemporal(out Bool value) =>
            mockObj.ovrp_GetFoveationTemporal(out value);

        public static Result ovrp_SetFoveationTemporal(Bool value) =>
            mockObj.ovrp_SetFoveationTemporal(value);
#endif

#if OVR_INTERNAL_CODE // OVR_EYE_GAZE_INTERACTION
        public static Result ovrp_GetEyeGazeInteractionsState(Step stepId, int frameIndex,
            out EyeGazeInteractionsStateInternal eyeGazeInteractionsState) =>
            mockObj.ovrp_GetEyeGazeInteractionsState(stepId, frameIndex, out eyeGazeInteractionsState);
#endif

        public static Result ovrp_DeclareUser(in UInt64 userId, out UInt64 userHandle) =>
            mockObj.ovrp_DeclareUser(in userId, out userHandle);

#if OVR_INTERNAL_CODE
        public static Result ovrp_GetLayerVisibility(LayerDesc layerDesc,
            Posef posf,
            Vector3f scale,
            Bool overrideTextureRect,
            ref TextureRectMatrixf textureRectMatrix,
            out float layerVisibility) =>
            mockObj.ovrp_GetLayerVisibility(layerDesc, posf, scale, overrideTextureRect, ref textureRectMatrix, out layerVisibility);
#endif // OVR_INTERNAL_CODE
    }

    public class OVRP_1_81_0_TEST
    {

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE
        public virtual Result ovrp_GetHandTrackingState(Step stepId, int frameIndex, Hand hand,
            out HandTrackingStateInternal handState) =>
            OVRP_1_81_0_PROD.ovrp_GetHandTrackingState(stepId, frameIndex, hand, out handState);
#endif
    }

    public static class OVRP_1_81_0
    {
        public static OVRP_1_81_0_TEST mockObj = new OVRP_1_81_0_TEST();

        public static readonly System.Version version = OVRP_1_81_0_PROD.version;

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE
        public static Result ovrp_GetHandTrackingState(Step stepId, int frameIndex, Hand hand,
            out HandTrackingStateInternal handState) =>
            mockObj.ovrp_GetHandTrackingState(stepId, frameIndex, hand, out handState);
#endif
    }

    public class OVRP_1_82_0_TEST
    {

#if OVR_INTERNAL_CODE
        public virtual Result ovrp_GetFaceTrackingModelVersion(out int majorVersion, out int minorVersion,
            out int patchVersion) =>
            OVRP_1_82_0_PROD.ovrp_GetFaceTrackingModelVersion(out majorVersion, out minorVersion, out patchVersion);
#endif // OVR_INTERNAL_CODE

#if OVR_INTERNAL_CODE
        public virtual Result ovrp_CreateSceneObjectTracker(ref SceneObjectTrackerBaseCreateInfo createInfo,
            out UInt64 requestId) =>
            OVRP_1_82_0_PROD.ovrp_CreateSceneObjectTracker(ref createInfo, out requestId);

        public virtual Result ovrp_DestroySceneObjectTracker(out UInt64 requestId) =>
            OVRP_1_82_0_PROD.ovrp_DestroySceneObjectTracker(out requestId);
#endif // OVR_INTERNAL_CODE

        public virtual Result ovrp_GetSpaceTriangleMesh(ref UInt64 space,
            ref TriangleMeshInternal triangleMeshInternal) =>
            OVRP_1_82_0_PROD.ovrp_GetSpaceTriangleMesh(ref space, ref triangleMeshInternal);
    }

    public static class OVRP_1_82_0
    {
        public static OVRP_1_82_0_TEST mockObj = new OVRP_1_82_0_TEST();

        public static readonly System.Version version = OVRP_1_82_0_PROD.version;

#if OVR_INTERNAL_CODE
        public static Result ovrp_GetFaceTrackingModelVersion(out int majorVersion, out int minorVersion,
            out int patchVersion) =>
            mockObj.ovrp_GetFaceTrackingModelVersion(out majorVersion, out minorVersion, out patchVersion);
#endif // OVR_INTERNAL_CODE

#if OVR_INTERNAL_CODE
        public static Result ovrp_CreateSceneObjectTracker(ref SceneObjectTrackerBaseCreateInfo createInfo,
            out UInt64 requestId) =>
            mockObj.ovrp_CreateSceneObjectTracker(ref createInfo, out requestId);

        public static Result ovrp_DestroySceneObjectTracker(out UInt64 requestId) =>
            mockObj.ovrp_DestroySceneObjectTracker(out requestId);
#endif // OVR_INTERNAL_CODE

        public static Result ovrp_GetSpaceTriangleMesh(ref UInt64 space,
            ref TriangleMeshInternal triangleMeshInternal) =>
            mockObj.ovrp_GetSpaceTriangleMesh(ref space, ref triangleMeshInternal);
    }

    public class OVRP_1_83_0_TEST
    {

        public virtual Result ovrp_GetControllerState6(uint controllerMask, ref ControllerState6 controllerState) =>
            OVRP_1_83_0_PROD.ovrp_GetControllerState6(controllerMask, ref controllerState);

        public virtual Result ovrp_GetVirtualKeyboardModelAnimationStates(
            ref VirtualKeyboardModelAnimationStatesInternal animationStates) =>
            OVRP_1_83_0_PROD.ovrp_GetVirtualKeyboardModelAnimationStates(ref animationStates);

        public virtual Result ovrp_GetVirtualKeyboardDirtyTextures(
            ref VirtualKeyboardTextureIdsInternal textureIds) =>
            OVRP_1_83_0_PROD.ovrp_GetVirtualKeyboardDirtyTextures(ref textureIds);

        public virtual Result ovrp_GetVirtualKeyboardTextureData(UInt64 textureId,
            ref VirtualKeyboardTextureData textureData) =>
            OVRP_1_83_0_PROD.ovrp_GetVirtualKeyboardTextureData(textureId, ref textureData);

        public virtual Result ovrp_SetVirtualKeyboardModelVisibility(
            ref VirtualKeyboardModelVisibility visibility) =>
            OVRP_1_83_0_PROD.ovrp_SetVirtualKeyboardModelVisibility(ref visibility);
    }

    public static class OVRP_1_83_0
    {
        public static OVRP_1_83_0_TEST mockObj = new OVRP_1_83_0_TEST();

        public static readonly System.Version version = OVRP_1_83_0_PROD.version;

        public static Result ovrp_GetControllerState6(uint controllerMask, ref ControllerState6 controllerState) =>
            mockObj.ovrp_GetControllerState6(controllerMask, ref controllerState);

        public static Result ovrp_GetVirtualKeyboardModelAnimationStates(
            ref VirtualKeyboardModelAnimationStatesInternal animationStates) =>
            mockObj.ovrp_GetVirtualKeyboardModelAnimationStates(ref animationStates);

        public static Result ovrp_GetVirtualKeyboardDirtyTextures(
            ref VirtualKeyboardTextureIdsInternal textureIds) =>
            mockObj.ovrp_GetVirtualKeyboardDirtyTextures(ref textureIds);

        public static Result ovrp_GetVirtualKeyboardTextureData(UInt64 textureId,
            ref VirtualKeyboardTextureData textureData) =>
            mockObj.ovrp_GetVirtualKeyboardTextureData(textureId, ref textureData);

        public static Result ovrp_SetVirtualKeyboardModelVisibility(
            ref VirtualKeyboardModelVisibility visibility) =>
            mockObj.ovrp_SetVirtualKeyboardModelVisibility(ref visibility);
    }

    public class OVRP_1_84_0_TEST
    {

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE
        public virtual Result ovrp_StartLocalGroup(ref LocalGroupStartInfo info, out UInt64 requestId) =>
            OVRP_1_84_0_PROD.ovrp_StartLocalGroup(ref info, out requestId);

        public virtual Result ovrp_StartLocalGroupDiscovery(ref LocalGroupDiscoveryStartInfo info,
            out UInt64 requestId) =>
            OVRP_1_84_0_PROD.ovrp_StartLocalGroupDiscovery(ref info, out requestId);

        public virtual Result ovrp_StopLocalGroupDiscovery(ref LocalGroupDiscoveryStopInfo info) =>
            OVRP_1_84_0_PROD.ovrp_StopLocalGroupDiscovery(ref info);

        public virtual Result ovrp_JoinLocalGroup(ref LocalGroupJoinInfo info, out UInt64 requestId) =>
            OVRP_1_84_0_PROD.ovrp_JoinLocalGroup(ref info, out requestId);

        public virtual Result ovrp_LeaveLocalGroup(ref LocalGroupLeaveInfo info, out UInt64 requestId) =>
            OVRP_1_84_0_PROD.ovrp_LeaveLocalGroup(ref info, out requestId);

        public virtual Result ovrp_SetLocalGroupDiscoverabilityMode(ref LocalGroupSetDiscoverabilityModeInfo info,
            out UInt64 requestId) =>
            OVRP_1_84_0_PROD.ovrp_SetLocalGroupDiscoverabilityMode(ref info, out requestId);

        public virtual Result ovrp_SetLocalGroupAppInfo(ref LocalGroupAppInfoSetInfo info, out UInt64 requestId) =>
            OVRP_1_84_0_PROD.ovrp_SetLocalGroupAppInfo(ref info, out requestId);

        public virtual Result ovrp_SetLocalGroupParticipantAppInfo(ref LocalGroupParticipantAppInfoSetInfo info,
            out UInt64 requestId) =>
            OVRP_1_84_0_PROD.ovrp_SetLocalGroupParticipantAppInfo(ref info, out requestId);

        public virtual Result ovrp_QueryLocalGroupParticipants(ref LocalGroupParticipantsQueryInfo info,
            out UInt64 requestId) =>
            OVRP_1_84_0_PROD.ovrp_QueryLocalGroupParticipants(ref info, out requestId);

        public virtual Result ovrp_GetLocalGroupParticipantsQueryResults(UInt64 queryRequestId,
            ref LocalGroupParticipantsQueryResults results) =>
            OVRP_1_84_0_PROD.ovrp_GetLocalGroupParticipantsQueryResults(queryRequestId, ref results);

#endif
        public virtual Result ovrp_CreatePassthroughColorLut(PassthroughColorLutChannels channels,
            UInt32 resolution, PassthroughColorLutData data, out ulong colorLut) =>
            OVRP_1_84_0_PROD.ovrp_CreatePassthroughColorLut(channels, resolution, data, out colorLut);

        public virtual Result ovrp_DestroyPassthroughColorLut(ulong colorLut) =>
            OVRP_1_84_0_PROD.ovrp_DestroyPassthroughColorLut(colorLut);

        public virtual Result ovrp_UpdatePassthroughColorLut(ulong colorLut, PassthroughColorLutData data) =>
            OVRP_1_84_0_PROD.ovrp_UpdatePassthroughColorLut(colorLut, data);

        public virtual Result ovrp_SetInsightPassthroughStyle2(int layerId, in InsightPassthroughStyle2 style) =>
            OVRP_1_84_0_PROD.ovrp_SetInsightPassthroughStyle2(layerId, in style);

        public virtual Result ovrp_GetLayerRecommendedResolution(int layerId, out Sizei recommendedDimensions) =>
            OVRP_1_84_0_PROD.ovrp_GetLayerRecommendedResolution(layerId, out recommendedDimensions);

        public virtual Result ovrp_GetEyeLayerRecommendedResolution(out Sizei recommendedDimensions) =>
            OVRP_1_84_0_PROD.ovrp_GetEyeLayerRecommendedResolution(out recommendedDimensions);

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE
        public virtual Result ovrp_GetFullBodyTrackingEnabled(out Bool fullBodyTrackingEnabled) =>
            OVRP_1_84_0_PROD.ovrp_GetFullBodyTrackingEnabled(out fullBodyTrackingEnabled);
#endif // FULL BODY

#if OVR_INTERNAL_CODE
        public virtual Result ovrp_StartBodyTracking2(BodyJointSet jointSet) =>
            OVRP_1_84_0_PROD.ovrp_StartBodyTracking2(jointSet);

        public virtual Result ovrp_SuggestBodyTrackingFidelity(BodyTrackingFidelity bodyTrackingFidelity) =>
            OVRP_1_84_0_PROD.ovrp_SuggestBodyTrackingFidelity(bodyTrackingFidelity);

        public virtual Result ovrp_GetBodyState2(Step stepId, int frameIndex, out BodyState2Internal bodyState) =>
            OVRP_1_84_0_PROD.ovrp_GetBodyState2(stepId, frameIndex, out bodyState);
#endif // FULL BODY

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE
        public virtual Result ovrp_GetSkeleton3(SkeletonType skeletonType, out Skeleton3Internal skeleton) =>
            OVRP_1_84_0_PROD.ovrp_GetSkeleton3(skeletonType, out skeleton);
#endif // FULL BODY

        public virtual Result ovrp_QplMarkerStart(int markerId, int instanceKey, long timestampMs) =>
            OVRP_1_84_0_PROD.ovrp_QplMarkerStart(markerId, instanceKey, timestampMs);

        public virtual Result ovrp_QplMarkerEnd(int markerId, Qpl.ResultType resultTypeId,
            int instanceKey, long timestampMs) =>
            OVRP_1_84_0_PROD.ovrp_QplMarkerEnd(markerId, resultTypeId, instanceKey, timestampMs);

        public virtual Result ovrp_QplMarkerPoint(int markerId,  string name,
            int instanceKey, long timestampMs) =>
            OVRP_1_84_0_PROD.ovrp_QplMarkerPoint(markerId, name, instanceKey, timestampMs);

        public virtual Result ovrp_QplMarkerPointCached(int markerId, int nameHandle, int instanceKey,
            long timestampMs) =>
            OVRP_1_84_0_PROD.ovrp_QplMarkerPointCached(markerId, nameHandle, instanceKey, timestampMs);

        public virtual Result ovrp_QplMarkerAnnotation(int markerId,
             string annotationKey,
             string annotationValue, int instanceKey) =>
            OVRP_1_84_0_PROD.ovrp_QplMarkerAnnotation(markerId, annotationKey, annotationValue, instanceKey);

        public virtual Result ovrp_QplCreateMarkerHandle( string name,
            out int nameHandle) =>
            OVRP_1_84_0_PROD.ovrp_QplCreateMarkerHandle(name, out nameHandle);

        public virtual Result ovrp_QplDestroyMarkerHandle(int nameHandle) =>
            OVRP_1_84_0_PROD.ovrp_QplDestroyMarkerHandle(nameHandle);
    }

    public static class OVRP_1_84_0
    {
        public static OVRP_1_84_0_TEST mockObj = new OVRP_1_84_0_TEST();

        public static readonly System.Version version = OVRP_1_84_0_PROD.version;

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE
        public static Result ovrp_StartLocalGroup(ref LocalGroupStartInfo info, out UInt64 requestId) =>
            mockObj.ovrp_StartLocalGroup(ref info, out requestId);

        public static Result ovrp_StartLocalGroupDiscovery(ref LocalGroupDiscoveryStartInfo info,
            out UInt64 requestId) =>
            mockObj.ovrp_StartLocalGroupDiscovery(ref info, out requestId);

        public static Result ovrp_StopLocalGroupDiscovery(ref LocalGroupDiscoveryStopInfo info) =>
            mockObj.ovrp_StopLocalGroupDiscovery(ref info);

        public static Result ovrp_JoinLocalGroup(ref LocalGroupJoinInfo info, out UInt64 requestId) =>
            mockObj.ovrp_JoinLocalGroup(ref info, out requestId);

        public static Result ovrp_LeaveLocalGroup(ref LocalGroupLeaveInfo info, out UInt64 requestId) =>
            mockObj.ovrp_LeaveLocalGroup(ref info, out requestId);

        public static Result ovrp_SetLocalGroupDiscoverabilityMode(ref LocalGroupSetDiscoverabilityModeInfo info,
            out UInt64 requestId) =>
            mockObj.ovrp_SetLocalGroupDiscoverabilityMode(ref info, out requestId);

        public static Result ovrp_SetLocalGroupAppInfo(ref LocalGroupAppInfoSetInfo info, out UInt64 requestId) =>
            mockObj.ovrp_SetLocalGroupAppInfo(ref info, out requestId);

        public static Result ovrp_SetLocalGroupParticipantAppInfo(ref LocalGroupParticipantAppInfoSetInfo info,
            out UInt64 requestId) =>
            mockObj.ovrp_SetLocalGroupParticipantAppInfo(ref info, out requestId);

        public static Result ovrp_QueryLocalGroupParticipants(ref LocalGroupParticipantsQueryInfo info,
            out UInt64 requestId) =>
            mockObj.ovrp_QueryLocalGroupParticipants(ref info, out requestId);

        public static Result ovrp_GetLocalGroupParticipantsQueryResults(UInt64 queryRequestId,
            ref LocalGroupParticipantsQueryResults results) =>
            mockObj.ovrp_GetLocalGroupParticipantsQueryResults(queryRequestId, ref results);

#endif
        public static Result ovrp_CreatePassthroughColorLut(PassthroughColorLutChannels channels,
            UInt32 resolution, PassthroughColorLutData data, out ulong colorLut) =>
            mockObj.ovrp_CreatePassthroughColorLut(channels, resolution, data, out colorLut);

        public static Result ovrp_DestroyPassthroughColorLut(ulong colorLut) =>
            mockObj.ovrp_DestroyPassthroughColorLut(colorLut);

        public static Result ovrp_UpdatePassthroughColorLut(ulong colorLut, PassthroughColorLutData data) =>
            mockObj.ovrp_UpdatePassthroughColorLut(colorLut, data);

        public static Result ovrp_SetInsightPassthroughStyle2(int layerId, in InsightPassthroughStyle2 style) =>
            mockObj.ovrp_SetInsightPassthroughStyle2(layerId, in style);

        public static Result ovrp_GetLayerRecommendedResolution(int layerId, out Sizei recommendedDimensions) =>
            mockObj.ovrp_GetLayerRecommendedResolution(layerId, out recommendedDimensions);

        public static Result ovrp_GetEyeLayerRecommendedResolution(out Sizei recommendedDimensions) =>
            mockObj.ovrp_GetEyeLayerRecommendedResolution(out recommendedDimensions);

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE
        public static Result ovrp_GetFullBodyTrackingEnabled(out Bool fullBodyTrackingEnabled) =>
            mockObj.ovrp_GetFullBodyTrackingEnabled(out fullBodyTrackingEnabled);
#endif // FULL BODY

#if OVR_INTERNAL_CODE
        public static Result ovrp_StartBodyTracking2(BodyJointSet jointSet) =>
            mockObj.ovrp_StartBodyTracking2(jointSet);

        public static Result ovrp_SuggestBodyTrackingFidelity(BodyTrackingFidelity bodyTrackingFidelity) =>
            mockObj.ovrp_SuggestBodyTrackingFidelity(bodyTrackingFidelity);

        public static Result ovrp_GetBodyState2(Step stepId, int frameIndex, out BodyState2Internal bodyState) =>
            mockObj.ovrp_GetBodyState2(stepId, frameIndex, out bodyState);
#endif // FULL BODY

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE
        public static Result ovrp_GetSkeleton3(SkeletonType skeletonType, out Skeleton3Internal skeleton) =>
            mockObj.ovrp_GetSkeleton3(skeletonType, out skeleton);
#endif // FULL BODY

        public static Result ovrp_QplMarkerStart(int markerId, int instanceKey, long timestampMs) =>
            mockObj.ovrp_QplMarkerStart(markerId, instanceKey, timestampMs);

        public static Result ovrp_QplMarkerEnd(int markerId, Qpl.ResultType resultTypeId,
            int instanceKey, long timestampMs) =>
            mockObj.ovrp_QplMarkerEnd(markerId, resultTypeId, instanceKey, timestampMs);

        public static Result ovrp_QplMarkerPoint(int markerId,  string name,
            int instanceKey, long timestampMs) =>
            mockObj.ovrp_QplMarkerPoint(markerId, name, instanceKey, timestampMs);

        public static Result ovrp_QplMarkerPointCached(int markerId, int nameHandle, int instanceKey,
            long timestampMs) =>
            mockObj.ovrp_QplMarkerPointCached(markerId, nameHandle, instanceKey, timestampMs);

        public static Result ovrp_QplMarkerAnnotation(int markerId,
             string annotationKey,
             string annotationValue, int instanceKey) =>
            mockObj.ovrp_QplMarkerAnnotation(markerId, annotationKey, annotationValue, instanceKey);

        public static Result ovrp_QplCreateMarkerHandle( string name,
            out int nameHandle) =>
            mockObj.ovrp_QplCreateMarkerHandle(name, out nameHandle);

        public static Result ovrp_QplDestroyMarkerHandle(int nameHandle) =>
            mockObj.ovrp_QplDestroyMarkerHandle(nameHandle);
    }

    public class OVRP_1_85_0_TEST
    {

        public virtual Result ovrp_OnEditorShutdown() =>
            OVRP_1_85_0_PROD.ovrp_OnEditorShutdown();

        public virtual Result ovrp_GetPassthroughCapabilities(ref PassthroughCapabilities capabilityFlags) =>
            OVRP_1_85_0_PROD.ovrp_GetPassthroughCapabilities(ref capabilityFlags);
    }

    public static class OVRP_1_85_0
    {
        public static OVRP_1_85_0_TEST mockObj = new OVRP_1_85_0_TEST();

        public static readonly System.Version version = OVRP_1_85_0_PROD.version;

        public static Result ovrp_OnEditorShutdown() =>
            mockObj.ovrp_OnEditorShutdown();

        public static Result ovrp_GetPassthroughCapabilities(ref PassthroughCapabilities capabilityFlags) =>
            mockObj.ovrp_GetPassthroughCapabilities(ref capabilityFlags);
    }

    public class OVRP_1_86_0_TEST
    {

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE
        public virtual Result ovrp_LocalGroupShareSpaces(ref LocalGroupShareSpacesInfo info, out ulong requestId) =>
            OVRP_1_86_0_PROD.ovrp_LocalGroupShareSpaces(ref info, out requestId);
#endif

#if OVR_INTERNAL_CODE
        public virtual Result ovrp_CreateSceneReconstructionTracker(ref SceneReconstructionTrackerBaseCreateInfo createInfo,
            out UInt64 requestId) =>
            OVRP_1_86_0_PROD.ovrp_CreateSceneReconstructionTracker(ref createInfo, out requestId);

        public virtual Result ovrp_DestroySceneReconstructionTracker(out UInt64 requestId) =>
            OVRP_1_86_0_PROD.ovrp_DestroySceneReconstructionTracker(out requestId);
#endif

        public virtual Result ovrp_SetControllerDrivenHandPoses(Bool controllerDrivenHandPoses) =>
            OVRP_1_86_0_PROD.ovrp_SetControllerDrivenHandPoses(controllerDrivenHandPoses);

        public virtual Result ovrp_IsControllerDrivenHandPosesEnabled(ref Bool enabled) =>
            OVRP_1_86_0_PROD.ovrp_IsControllerDrivenHandPosesEnabled(ref enabled);

        public virtual Result ovrp_AreHandPosesGeneratedByControllerData(Step stepId, Node nodeId, ref Bool isGeneratedByControllerData) =>
            OVRP_1_86_0_PROD.ovrp_AreHandPosesGeneratedByControllerData(stepId, nodeId, ref isGeneratedByControllerData);

        public virtual Result ovrp_SetMultimodalHandsControllersSupported(Bool supported) =>
            OVRP_1_86_0_PROD.ovrp_SetMultimodalHandsControllersSupported(supported);

        public virtual Result ovrp_IsMultimodalHandsControllersSupported(ref Bool supported) =>
            OVRP_1_86_0_PROD.ovrp_IsMultimodalHandsControllersSupported(ref supported);

        public virtual Result ovrp_GetCurrentDetachedInteractionProfile(Hand hand,
            out InteractionProfile interactionProfile) =>
            OVRP_1_86_0_PROD.ovrp_GetCurrentDetachedInteractionProfile(hand, out interactionProfile);

        public virtual Result ovrp_GetControllerIsInHand(Step stepId, Node nodeId, ref Bool isInHand) =>
            OVRP_1_86_0_PROD.ovrp_GetControllerIsInHand(stepId, nodeId, ref isInHand);

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE
        public virtual Result ovrp_QuerySpaces2(ref SpaceQueryInfo2 queryInfo, out UInt64 requestId) =>
            OVRP_1_86_0_PROD.ovrp_QuerySpaces2(ref queryInfo, out requestId);
#endif
    }

    public static class OVRP_1_86_0
    {
        public static OVRP_1_86_0_TEST mockObj = new OVRP_1_86_0_TEST();

        public static readonly System.Version version = OVRP_1_86_0_PROD.version;

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE
        public static Result ovrp_LocalGroupShareSpaces(ref LocalGroupShareSpacesInfo info, out ulong requestId) =>
            mockObj.ovrp_LocalGroupShareSpaces(ref info, out requestId);
#endif

#if OVR_INTERNAL_CODE
        public static Result ovrp_CreateSceneReconstructionTracker(ref SceneReconstructionTrackerBaseCreateInfo createInfo,
            out UInt64 requestId) =>
            mockObj.ovrp_CreateSceneReconstructionTracker(ref createInfo, out requestId);

        public static Result ovrp_DestroySceneReconstructionTracker(out UInt64 requestId) =>
            mockObj.ovrp_DestroySceneReconstructionTracker(out requestId);
#endif

        public static Result ovrp_SetControllerDrivenHandPoses(Bool controllerDrivenHandPoses) =>
            mockObj.ovrp_SetControllerDrivenHandPoses(controllerDrivenHandPoses);

        public static Result ovrp_IsControllerDrivenHandPosesEnabled(ref Bool enabled) =>
            mockObj.ovrp_IsControllerDrivenHandPosesEnabled(ref enabled);

        public static Result ovrp_AreHandPosesGeneratedByControllerData(Step stepId, Node nodeId, ref Bool isGeneratedByControllerData) =>
            mockObj.ovrp_AreHandPosesGeneratedByControllerData(stepId, nodeId, ref isGeneratedByControllerData);

        public static Result ovrp_SetMultimodalHandsControllersSupported(Bool supported) =>
            mockObj.ovrp_SetMultimodalHandsControllersSupported(supported);

        public static Result ovrp_IsMultimodalHandsControllersSupported(ref Bool supported) =>
            mockObj.ovrp_IsMultimodalHandsControllersSupported(ref supported);

        public static Result ovrp_GetCurrentDetachedInteractionProfile(Hand hand,
            out InteractionProfile interactionProfile) =>
            mockObj.ovrp_GetCurrentDetachedInteractionProfile(hand, out interactionProfile);

        public static Result ovrp_GetControllerIsInHand(Step stepId, Node nodeId, ref Bool isInHand) =>
            mockObj.ovrp_GetControllerIsInHand(stepId, nodeId, ref isInHand);

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE
        public static Result ovrp_QuerySpaces2(ref SpaceQueryInfo2 queryInfo, out UInt64 requestId) =>
            mockObj.ovrp_QuerySpaces2(ref queryInfo, out requestId);
#endif
    }

    public class OVRP_1_87_0_TEST
    {

        public virtual Result ovrp_GetPassthroughPreferences(out PassthroughPreferences preferences) =>
            OVRP_1_87_0_PROD.ovrp_GetPassthroughPreferences(out preferences);

        public virtual Result ovrp_SetEyeBufferSharpenType(LayerSharpenType sharpenType) =>
            OVRP_1_87_0_PROD.ovrp_SetEyeBufferSharpenType(sharpenType);

        public virtual Result ovrp_SetControllerDrivenHandPosesAreNatural(Bool controllerDrivenHandPosesAreNatural) =>
            OVRP_1_87_0_PROD.ovrp_SetControllerDrivenHandPosesAreNatural(controllerDrivenHandPosesAreNatural);

        public virtual Result ovrp_AreControllerDrivenHandPosesNatural(ref Bool natural) =>
            OVRP_1_87_0_PROD.ovrp_AreControllerDrivenHandPosesNatural(ref natural);
    }

    public static class OVRP_1_87_0
    {
        public static OVRP_1_87_0_TEST mockObj = new OVRP_1_87_0_TEST();

        public static readonly System.Version version = OVRP_1_87_0_PROD.version;

        public static Result ovrp_GetPassthroughPreferences(out PassthroughPreferences preferences) =>
            mockObj.ovrp_GetPassthroughPreferences(out preferences);

        public static Result ovrp_SetEyeBufferSharpenType(LayerSharpenType sharpenType) =>
            mockObj.ovrp_SetEyeBufferSharpenType(sharpenType);

        public static Result ovrp_SetControllerDrivenHandPosesAreNatural(Bool controllerDrivenHandPosesAreNatural) =>
            mockObj.ovrp_SetControllerDrivenHandPosesAreNatural(controllerDrivenHandPosesAreNatural);

        public static Result ovrp_AreControllerDrivenHandPosesNatural(ref Bool natural) =>
            mockObj.ovrp_AreControllerDrivenHandPosesNatural(ref natural);
    }

    public class OVRP_1_88_0_TEST
    {

        public virtual Result ovrp_SetSimultaneousHandsAndControllersEnabled(Bool enabled) =>
            OVRP_1_88_0_PROD.ovrp_SetSimultaneousHandsAndControllersEnabled(enabled);
    }

    public static class OVRP_1_88_0
    {
        public static OVRP_1_88_0_TEST mockObj = new OVRP_1_88_0_TEST();

        public static readonly System.Version version = OVRP_1_88_0_PROD.version;

        public static Result ovrp_SetSimultaneousHandsAndControllersEnabled(Bool enabled) =>
            mockObj.ovrp_SetSimultaneousHandsAndControllersEnabled(enabled);
    }

    public class OVRP_1_89_0_TEST
    {

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE  // Hands3.0
        public virtual Result ovrp_SetBodyFusionHandPoses(Bool bodyFusionHandPoses) =>
            OVRP_1_89_0_PROD.ovrp_SetBodyFusionHandPoses(bodyFusionHandPoses);

        public virtual Result ovrp_IsBodyFusionHandPosesEnabled(ref Bool enabled) =>
            OVRP_1_89_0_PROD.ovrp_IsBodyFusionHandPosesEnabled(ref enabled);
#endif
    }

    public static class OVRP_1_89_0
    {
        public static OVRP_1_89_0_TEST mockObj = new OVRP_1_89_0_TEST();

        public static readonly System.Version version = OVRP_1_89_0_PROD.version;

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE  // Hands3.0
        public static Result ovrp_SetBodyFusionHandPoses(Bool bodyFusionHandPoses) =>
            mockObj.ovrp_SetBodyFusionHandPoses(bodyFusionHandPoses);

        public static Result ovrp_IsBodyFusionHandPosesEnabled(ref Bool enabled) =>
            mockObj.ovrp_IsBodyFusionHandPosesEnabled(ref enabled);
#endif
    }

    public class OVRP_1_90_0_TEST
    {

#if OVR_INTERNAL_CODE
        public virtual Result ovrp_SuggestBodyTrackingCalibration(BodyTrackingCalibrationInfo calibrationInfo) =>
            OVRP_1_90_0_PROD.ovrp_SuggestBodyTrackingCalibration(calibrationInfo);
        public virtual Result ovrp_GetBodyState3(Step stepId, int frameIndex, out BodyState3Internal bodyState) =>
            OVRP_1_90_0_PROD.ovrp_GetBodyState3(stepId, frameIndex, out bodyState);
#endif // BODY_CALIBRATION
    }

    public static class OVRP_1_90_0
    {
        public static OVRP_1_90_0_TEST mockObj = new OVRP_1_90_0_TEST();

        public static readonly System.Version version = OVRP_1_90_0_PROD.version;

#if OVR_INTERNAL_CODE
        public static Result ovrp_SuggestBodyTrackingCalibration(BodyTrackingCalibrationInfo calibrationInfo) =>
            mockObj.ovrp_SuggestBodyTrackingCalibration(calibrationInfo);
        public static Result ovrp_GetBodyState3(Step stepId, int frameIndex, out BodyState3Internal bodyState) =>
            mockObj.ovrp_GetBodyState3(stepId, frameIndex, out bodyState);
#endif // BODY_CALIBRATION
    }

    public class OVRP_1_91_0_TEST
    {

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE  // HAND_TRACKING_MICROGESTURES
        public virtual Result ovrp_StartMicrogestureDetection() =>
            OVRP_1_91_0_PROD.ovrp_StartMicrogestureDetection();

        public virtual Result ovrp_StopMicrogestureDetection() =>
            OVRP_1_91_0_PROD.ovrp_StopMicrogestureDetection();

#endif

#if OVR_INTERNAL_CODE
        public virtual Result ovrp_UpdateSceneReconstructionTrackerSettings(ref SceneReconstructionTrackerSettingsUpdateInfo info,
            out UInt64 requestId) =>
            OVRP_1_91_0_PROD.ovrp_UpdateSceneReconstructionTrackerSettings(ref info, out requestId);

        public virtual Result ovrp_UpdateSceneReconstructionTrackerRoombox(ref SceneReconstructionTrackerRoomboxUpdateInfo info,
            out UInt64 requestId) =>
            OVRP_1_91_0_PROD.ovrp_UpdateSceneReconstructionTrackerRoombox(ref info, out requestId);
#endif
    }

    public static class OVRP_1_91_0
    {
        public static OVRP_1_91_0_TEST mockObj = new OVRP_1_91_0_TEST();

        public static readonly System.Version version = OVRP_1_91_0_PROD.version;

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE  // HAND_TRACKING_MICROGESTURES
        public static Result ovrp_StartMicrogestureDetection() =>
            mockObj.ovrp_StartMicrogestureDetection();

        public static Result ovrp_StopMicrogestureDetection() =>
            mockObj.ovrp_StopMicrogestureDetection();

#endif

#if OVR_INTERNAL_CODE
        public static Result ovrp_UpdateSceneReconstructionTrackerSettings(ref SceneReconstructionTrackerSettingsUpdateInfo info,
            out UInt64 requestId) =>
            mockObj.ovrp_UpdateSceneReconstructionTrackerSettings(ref info, out requestId);

        public static Result ovrp_UpdateSceneReconstructionTrackerRoombox(ref SceneReconstructionTrackerRoomboxUpdateInfo info,
            out UInt64 requestId) =>
            mockObj.ovrp_UpdateSceneReconstructionTrackerRoombox(ref info, out requestId);
#endif
    }

    public class OVRP_1_92_0_TEST
    {

        public virtual Result ovrp_GetFaceState2(Step stepId, int frameIndex, out FaceState2Internal faceState) =>
            OVRP_1_92_0_PROD.ovrp_GetFaceState2(stepId, frameIndex, out faceState);
        public virtual Result ovrp_StartFaceTracking2(FaceTrackingDataSource[] requestedDataSources, uint requestedDataSourcesCount) =>
            OVRP_1_92_0_PROD.ovrp_StartFaceTracking2(requestedDataSources, requestedDataSourcesCount);
        public virtual Result ovrp_StopFaceTracking2() =>
            OVRP_1_92_0_PROD.ovrp_StopFaceTracking2();
        public virtual Result ovrp_GetFaceTracking2Enabled(out Bool faceTracking2Enabled) =>
            OVRP_1_92_0_PROD.ovrp_GetFaceTracking2Enabled(out faceTracking2Enabled);
        public virtual Result ovrp_GetFaceTracking2Supported(out Bool faceTracking2Enabled) =>
            OVRP_1_92_0_PROD.ovrp_GetFaceTracking2Supported(out faceTracking2Enabled);

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE
        public virtual Result ovrp_DiscoverSpaces(in SpaceDiscoveryInfo info, out UInt64 requestId) =>
            OVRP_1_92_0_PROD.ovrp_DiscoverSpaces(in info, out requestId);

        public virtual unsafe Result ovrp_RetrieveSpaceDiscoveryResults(UInt64 requestId,
            ref SpaceDiscoveryResults results) =>
            OVRP_1_92_0_PROD.ovrp_RetrieveSpaceDiscoveryResults(requestId, ref results);

        public virtual unsafe Result ovrp_SaveSpaces(UInt32 spaceCount, UInt64* spaces, out UInt64 requestId) =>
            OVRP_1_92_0_PROD.ovrp_SaveSpaces(spaceCount, spaces, out requestId);

        public virtual unsafe Result ovrp_EraseSpaces(UInt32 spaceCount, UInt64* spaces, UInt32 uuidCount,
            Guid* uuids, out UInt64 requestId) =>
            OVRP_1_92_0_PROD.ovrp_EraseSpaces(spaceCount, spaces, uuidCount, uuids, out requestId);
#endif

        public virtual Result ovrp_RequestBodyTrackingFidelity(BodyTrackingFidelity2 fidelity) =>
            OVRP_1_92_0_PROD.ovrp_RequestBodyTrackingFidelity(fidelity);

        public virtual Result ovrp_SuggestBodyTrackingCalibrationOverride(BodyTrackingCalibrationInfo calibrationInfo) =>
            OVRP_1_92_0_PROD.ovrp_SuggestBodyTrackingCalibrationOverride(calibrationInfo);

        public virtual Result ovrp_ResetBodyTrackingCalibration() =>
            OVRP_1_92_0_PROD.ovrp_ResetBodyTrackingCalibration();

        public virtual Result ovrp_GetBodyState4(Step stepId, int frameIndex, out BodyState4Internal bodyState) =>
            OVRP_1_92_0_PROD.ovrp_GetBodyState4(stepId, frameIndex, out bodyState);

        public virtual Result ovrp_GetSkeleton3(SkeletonType skeletonType, out Skeleton3Internal skeleton) =>
            OVRP_1_92_0_PROD.ovrp_GetSkeleton3(skeletonType, out skeleton);

        public virtual Result ovrp_StartBodyTracking2(BodyJointSet jointSet) =>
            OVRP_1_92_0_PROD.ovrp_StartBodyTracking2(jointSet);

        public virtual Result ovrp_QplSetConsent(Bool consent) =>
            OVRP_1_92_0_PROD.ovrp_QplSetConsent(consent);
    }

    public static class OVRP_1_92_0
    {
        public static OVRP_1_92_0_TEST mockObj = new OVRP_1_92_0_TEST();

        public static readonly System.Version version = OVRP_1_92_0_PROD.version;

        public static Result ovrp_GetFaceState2(Step stepId, int frameIndex, out FaceState2Internal faceState) =>
            mockObj.ovrp_GetFaceState2(stepId, frameIndex, out faceState);
        public static Result ovrp_StartFaceTracking2(FaceTrackingDataSource[] requestedDataSources, uint requestedDataSourcesCount) =>
            mockObj.ovrp_StartFaceTracking2(requestedDataSources, requestedDataSourcesCount);
        public static Result ovrp_StopFaceTracking2() =>
            mockObj.ovrp_StopFaceTracking2();
        public static Result ovrp_GetFaceTracking2Enabled(out Bool faceTracking2Enabled) =>
            mockObj.ovrp_GetFaceTracking2Enabled(out faceTracking2Enabled);
        public static Result ovrp_GetFaceTracking2Supported(out Bool faceTracking2Enabled) =>
            mockObj.ovrp_GetFaceTracking2Supported(out faceTracking2Enabled);

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE
        public static Result ovrp_DiscoverSpaces(in SpaceDiscoveryInfo info, out UInt64 requestId) =>
            mockObj.ovrp_DiscoverSpaces(in info, out requestId);

        public static unsafe Result ovrp_RetrieveSpaceDiscoveryResults(UInt64 requestId,
            ref SpaceDiscoveryResults results) =>
            mockObj.ovrp_RetrieveSpaceDiscoveryResults(requestId, ref results);

        public static unsafe Result ovrp_SaveSpaces(UInt32 spaceCount, UInt64* spaces, out UInt64 requestId) =>
            mockObj.ovrp_SaveSpaces(spaceCount, spaces, out requestId);

        public static unsafe Result ovrp_EraseSpaces(UInt32 spaceCount, UInt64* spaces, UInt32 uuidCount,
            Guid* uuids, out UInt64 requestId) =>
            mockObj.ovrp_EraseSpaces(spaceCount, spaces, uuidCount, uuids, out requestId);
#endif

        public static Result ovrp_RequestBodyTrackingFidelity(BodyTrackingFidelity2 fidelity) =>
            mockObj.ovrp_RequestBodyTrackingFidelity(fidelity);

        public static Result ovrp_SuggestBodyTrackingCalibrationOverride(BodyTrackingCalibrationInfo calibrationInfo) =>
            mockObj.ovrp_SuggestBodyTrackingCalibrationOverride(calibrationInfo);

        public static Result ovrp_ResetBodyTrackingCalibration() =>
            mockObj.ovrp_ResetBodyTrackingCalibration();

        public static Result ovrp_GetBodyState4(Step stepId, int frameIndex, out BodyState4Internal bodyState) =>
            mockObj.ovrp_GetBodyState4(stepId, frameIndex, out bodyState);

        public static Result ovrp_GetSkeleton3(SkeletonType skeletonType, out Skeleton3Internal skeleton) =>
            mockObj.ovrp_GetSkeleton3(skeletonType, out skeleton);

        public static Result ovrp_StartBodyTracking2(BodyJointSet jointSet) =>
            mockObj.ovrp_StartBodyTracking2(jointSet);

        public static Result ovrp_QplSetConsent(Bool consent) =>
            mockObj.ovrp_QplSetConsent(consent);
    }

    public class OVRP_1_93_0_TEST
    {

        public virtual Result ovrp_SetWideMotionModeHandPoses(Bool wideMotionModeHandPoses) =>
            OVRP_1_93_0_PROD.ovrp_SetWideMotionModeHandPoses(wideMotionModeHandPoses);

        public virtual Result ovrp_IsSetWideMotionModeHandPosesEnabled(ref Bool enabled) =>
            OVRP_1_93_0_PROD.ovrp_IsSetWideMotionModeHandPosesEnabled(ref enabled);

#if OVR_INTERNAL_CODE
        public virtual Result ovrp_GetTrackedKeyboardDimensions(out Vector3 dimensions) =>
            OVRP_1_93_0_PROD.ovrp_GetTrackedKeyboardDimensions(out dimensions);
#endif

#if OVR_INTERNAL_CODE // Room entity info
        public virtual unsafe Result ovrp_GetSpaceRoomLabel(ulong space, uint bufferCapacityInput, out uint bufferCountOutput, byte* buffer) =>
            OVRP_1_93_0_PROD.ovrp_GetSpaceRoomLabel(space, bufferCapacityInput, out bufferCountOutput, buffer);
#endif

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE // XR_META_return_to_room
        public virtual unsafe Result ovrp_RequestReturnToRoom(uint roomUuidCount, Guid* uuids) =>
            OVRP_1_93_0_PROD.ovrp_RequestReturnToRoom(roomUuidCount, uuids);
#endif

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE // XR_META_boundary_visibility
        public virtual Result ovrp_RequestBoundaryVisibility(BoundaryVisibility boundaryVisibility) =>
            OVRP_1_93_0_PROD.ovrp_RequestBoundaryVisibility(boundaryVisibility);
#endif // OVR_PARTNER_CODE || OVR_INTERNAL_CODE // XR_META_boundary_visibility
    }

    public static class OVRP_1_93_0
    {
        public static OVRP_1_93_0_TEST mockObj = new OVRP_1_93_0_TEST();

        public static readonly System.Version version = OVRP_1_93_0_PROD.version;

        public static Result ovrp_SetWideMotionModeHandPoses(Bool wideMotionModeHandPoses) =>
            mockObj.ovrp_SetWideMotionModeHandPoses(wideMotionModeHandPoses);

        public static Result ovrp_IsSetWideMotionModeHandPosesEnabled(ref Bool enabled) =>
            mockObj.ovrp_IsSetWideMotionModeHandPosesEnabled(ref enabled);

#if OVR_INTERNAL_CODE
        public static Result ovrp_GetTrackedKeyboardDimensions(out Vector3 dimensions) =>
            mockObj.ovrp_GetTrackedKeyboardDimensions(out dimensions);
#endif

#if OVR_INTERNAL_CODE // Room entity info
        public static unsafe Result ovrp_GetSpaceRoomLabel(ulong space, uint bufferCapacityInput, out uint bufferCountOutput, byte* buffer) =>
            mockObj.ovrp_GetSpaceRoomLabel(space, bufferCapacityInput, out bufferCountOutput, buffer);
#endif

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE // XR_META_return_to_room
        public static unsafe Result ovrp_RequestReturnToRoom(uint roomUuidCount, Guid* uuids) =>
            mockObj.ovrp_RequestReturnToRoom(roomUuidCount, uuids);
#endif

#if OVR_PARTNER_CODE || OVR_INTERNAL_CODE // XR_META_boundary_visibility
        public static Result ovrp_RequestBoundaryVisibility(BoundaryVisibility boundaryVisibility) =>
            mockObj.ovrp_RequestBoundaryVisibility(boundaryVisibility);
#endif // OVR_PARTNER_CODE || OVR_INTERNAL_CODE // XR_META_boundary_visibility
    }

    public class OVRP_1_94_0_TEST
    {

#if OVR_INTERNAL_CODE // XR_META_lighting_estimation
        public virtual Result ovrp_StartLightingEstimation(ulong startFlags, EnvironmentMapResolution environmentMapResolution, EnvironmentMapPixelFormat environmentMapPixelFormat) =>
            OVRP_1_94_0_PROD.ovrp_StartLightingEstimation(startFlags, environmentMapResolution, environmentMapPixelFormat);

        public virtual Result ovrp_StopLightingEstimation() =>
            OVRP_1_94_0_PROD.ovrp_StopLightingEstimation();

        public virtual Result ovrp_GetDirectionalLightingEstimate(out DirectionalLightingEstimate estimate) =>
            OVRP_1_94_0_PROD.ovrp_GetDirectionalLightingEstimate(out estimate);

        public virtual unsafe Result ovrp_GetEnvironmentMapLightingEstimate(EnvironmentMapCubeFace cubeFace, ref EnvironmentMapLightingEstimate estimate) =>
            OVRP_1_94_0_PROD.ovrp_GetEnvironmentMapLightingEstimate(cubeFace, ref estimate);

        public virtual Result ovrp_GetLightingEstimateColorCorrection(out LightingEstimateColorCorrection correction) =>
            OVRP_1_94_0_PROD.ovrp_GetLightingEstimateColorCorrection(out correction);
#endif // OVR_INTERNAL_CODE // XR_META_lighting_estimation
    }

    public static class OVRP_1_94_0
    {
        public static OVRP_1_94_0_TEST mockObj = new OVRP_1_94_0_TEST();

        public static readonly System.Version version = OVRP_1_94_0_PROD.version;

#if OVR_INTERNAL_CODE // XR_META_lighting_estimation
        public static Result ovrp_StartLightingEstimation(ulong startFlags, EnvironmentMapResolution environmentMapResolution, EnvironmentMapPixelFormat environmentMapPixelFormat) =>
            mockObj.ovrp_StartLightingEstimation(startFlags, environmentMapResolution, environmentMapPixelFormat);

        public static Result ovrp_StopLightingEstimation() =>
            mockObj.ovrp_StopLightingEstimation();

        public static Result ovrp_GetDirectionalLightingEstimate(out DirectionalLightingEstimate estimate) =>
            mockObj.ovrp_GetDirectionalLightingEstimate(out estimate);

        public static unsafe Result ovrp_GetEnvironmentMapLightingEstimate(EnvironmentMapCubeFace cubeFace, ref EnvironmentMapLightingEstimate estimate) =>
            mockObj.ovrp_GetEnvironmentMapLightingEstimate(cubeFace, ref estimate);

        public static Result ovrp_GetLightingEstimateColorCorrection(out LightingEstimateColorCorrection correction) =>
            mockObj.ovrp_GetLightingEstimateColorCorrection(out correction);
#endif // OVR_INTERNAL_CODE // XR_META_lighting_estimation
    }

    public class OVRP_1_95_0_TEST
    {

#if OVR_INTERNAL_CODE
        public virtual Result ovrp_SetHandSkeletonVersion(OVRHandSkeletonVersion handSkeletonVersion) =>
            OVRP_1_95_0_PROD.ovrp_SetHandSkeletonVersion(handSkeletonVersion);
#endif

        public virtual Result ovrp_SetDeveloperTelemetryConsent(Bool consent) =>
            OVRP_1_95_0_PROD.ovrp_SetDeveloperTelemetryConsent(consent);

#if OVR_INTERNAL_CODE // TODO - remove redaction before public release (T175611441)
        public virtual Result ovrp_CreateDynamicObjectTracker(DynamicObjectTrackerCreateInfo createInfo) =>
            OVRP_1_95_0_PROD.ovrp_CreateDynamicObjectTracker(createInfo);

        public virtual Result ovrp_DestroyDynamicObjectTracker() =>
            OVRP_1_95_0_PROD.ovrp_DestroyDynamicObjectTracker();

        public virtual Result ovrp_SetDynamicObjectTrackedClasses(DynamicObjectTrackedClassesSetInfo setInfo) =>
            OVRP_1_95_0_PROD.ovrp_SetDynamicObjectTrackedClasses(setInfo);

        public virtual Result ovrp_GetSpaceDynamicObjectData(ref UInt64 space, out DynamicObjectData data) =>
            OVRP_1_95_0_PROD.ovrp_GetSpaceDynamicObjectData(ref space, out data);
#endif // OVR_INTERNAL_CODE
    }

    public static class OVRP_1_95_0
    {
        public static OVRP_1_95_0_TEST mockObj = new OVRP_1_95_0_TEST();

        public static readonly System.Version version = OVRP_1_95_0_PROD.version;

#if OVR_INTERNAL_CODE
        public static Result ovrp_SetHandSkeletonVersion(OVRHandSkeletonVersion handSkeletonVersion) =>
            mockObj.ovrp_SetHandSkeletonVersion(handSkeletonVersion);
#endif

        public static Result ovrp_SetDeveloperTelemetryConsent(Bool consent) =>
            mockObj.ovrp_SetDeveloperTelemetryConsent(consent);

#if OVR_INTERNAL_CODE // TODO - remove redaction before public release (T175611441)
        public static Result ovrp_CreateDynamicObjectTracker(DynamicObjectTrackerCreateInfo createInfo) =>
            mockObj.ovrp_CreateDynamicObjectTracker(createInfo);

        public static Result ovrp_DestroyDynamicObjectTracker() =>
            mockObj.ovrp_DestroyDynamicObjectTracker();

        public static Result ovrp_SetDynamicObjectTrackedClasses(DynamicObjectTrackedClassesSetInfo setInfo) =>
            mockObj.ovrp_SetDynamicObjectTrackedClasses(setInfo);

        public static Result ovrp_GetSpaceDynamicObjectData(ref UInt64 space, out DynamicObjectData data) =>
            mockObj.ovrp_GetSpaceDynamicObjectData(ref space, out data);
#endif // OVR_INTERNAL_CODE
    }

    public class OVRP_1_96_0_TEST
    {

        public virtual unsafe Result ovrp_QplMarkerAnnotationVariant(int markerId,
             string annotationKey, in Qpl.Variant annotationValue, int instanceKey) =>
            OVRP_1_96_0_PROD.ovrp_QplMarkerAnnotationVariant(markerId, annotationKey, in annotationValue, instanceKey);

        public virtual unsafe Result ovrp_QplMarkerPointData(int markerId,
             string name, Qpl.Annotation* annotations, int annotationCount,
            int instanceKey, long timestampMs) =>
            OVRP_1_96_0_PROD.ovrp_QplMarkerPointData(markerId, name, annotations, annotationCount, instanceKey, timestampMs);
    }

    public static class OVRP_1_96_0
    {
        public static OVRP_1_96_0_TEST mockObj = new OVRP_1_96_0_TEST();

        public static readonly System.Version version = OVRP_1_96_0_PROD.version;

        public static unsafe Result ovrp_QplMarkerAnnotationVariant(int markerId,
             string annotationKey, in Qpl.Variant annotationValue, int instanceKey) =>
            mockObj.ovrp_QplMarkerAnnotationVariant(markerId, annotationKey, in annotationValue, instanceKey);

        public static unsafe Result ovrp_QplMarkerPointData(int markerId,
             string name, Qpl.Annotation* annotations, int annotationCount,
            int instanceKey, long timestampMs) =>
            mockObj.ovrp_QplMarkerPointData(markerId, name, annotations, annotationCount, instanceKey, timestampMs);
    }

}

#pragma warning restore CS0618
#endif // OVRPLUGIN_TESTING
